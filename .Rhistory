read_ats(path = "inst/extdata", file = "test_ats.csv",
timezone = "America/Los_Angeles")
read_jsats(path = "inst/extdata", file = "test_tekno.SUM",
timezone = "America/Los_Angeles")
files <- sys.file("extdata", package = "filteRjsats") |> list.files()
files <- system.file("extdata", package = "filteRjsats") |> list.files()
files <- system.file("extdata", package = "filteRjsats") |>
list.files("test")
for(i in 1:length(files)){
for(i in 1:length(files)){
read_jsats(path = "inst/extdata", file = files[i],
timezone = "America/Los_Angeles")
}
raw_data <- list()
for(i in 1:length(files)){
raw_data[[i]] <- read_jsats(path = "inst/extdata", file = files[i],
timezone = "America/Los_Angeles")
}
usethis::use_data(raw_data[1], name = "raw_ats")
raw_ats <- raw_data[1]
usethis::use_data(raw_ats)
prefilter(raw_ats)
raw_ats <- raw_data[[1]]
usethis::use_data(raw_ats)
usethis::use_data(raw_ats, overwrite = TRUE)
prefilter(raw_ats)
get_reference_tags()
reftags <- get_reference_tags()
usethis::use_data(reftags)
prefilter(raw_ats, reftags)
load_all()
files <- system.file("extdata", package = "filteRjsats") |>
list.files("test")
raw_data <- list()
for(i in 1:length(files)){
raw_data[[i]] <- read_jsats(path = "inst/extdata", file = files[i],
timezone = "America/Los_Angeles")
}
View(raw_data)
path = "inst/extdata"
file = "SR21023_210603_091321.csv"
ATS <- data.frame(read.delim(file = file.path(path,file),
skip = 0))
colnames(ATS) <- "lines"
ATS$G72 = grepl("G72",ATS$lines)
ATS$commas = lengths(regmatches(ATS$lines, gregexpr(",",ATS$lines)))
ATS$valid = ifelse(ATS$G72 == TRUE & ATS$commas == 13, TRUE, FALSE)
ATS <- ATS[ATS$valid == TRUE,]
ATS <- tidyr::separate(data = ATS,
col = lines,
sep = ",",
into = c(NA,NA,NA,NA,'DateTime','TagCode',
'Tilt', 'VBatt', 'Temp', 'Pressure',
'SigStr', 'Bit_Period', 'Threshold'))
ATS$DT_Check = grepl('\\.',ATS$DateTime)
ATS <- ATS[ATS$DT_Check == TRUE,]
ATS$DateTime_Local = lubridate::mdy_hms(ATS$DateTime, tz = timezone)
ATS$Tag_Decimal = broman::hex2dec(ATS$Tag_Hex)
timezone = "America/Los_Angeles"
ATS$DateTime_Local = lubridate::mdy_hms(ATS$DateTime, tz = timezone)
ATS$FullID = ATS$TagCode
ATS$Tag_Hex = as.character(substr(ATS$TagCode,5,8)) #There's a space before the G
ATS$Tag_Decimal = broman::hex2dec(ATS$Tag_Hex)
ATS$Tilt = as.numeric(ATS$Tilt)
ATS$Volt = as.numeric(ATS$VBatt)
ATS$Temp = as.numeric(ATS$Temp)
ATS$SigStr = as.numeric(ATS$SigStr)
ATS$BitPer = ATS$Bit_Period
ATS <- tidyr::separate(data = ATS,
col = BitPer,
into = c(NA,"B1","B2"),
sep = "\\s")
ATS <- tidyr::separate(data = ATS,
col = B2,
into = c("B3","B4"),
sep = "/")
ATS$Freq = ifelse(is.na(ATS$B3),-999, 100000/(as.numeric(ATS$B1)+(as.numeric(ATS$B3)/31)))
ATS$Thres = ifelse(is.na(ATS$B3), -999, as.numeric(ATS$Threshold))
gsub("SR","",stringr::str_split(file, pattern = '\\.')[[1]][1])
ReceiverSN <-  gsub("SR","",stringr::str_split(file, pattern = '\\.')[[1]][1])
ReceiverSN <- stringr::str_split(ReceiverSN,pattern = '_')[[1]][1]
ATS$ReceiverSN <- rep(ReceiverSN, length(ATS$DateTime_Local))
ATS$Make <- rep("ATS", length(ATS$DateTime_Local))
ATS <- dplyr::select(.data =  ATS, ReceiverSN, Make, DateTime_Local,
Tag_Decimal, Tag_Hex, Tilt, Volt, Temp, SigStr, Freq,
Thres)
ATS
raw_ats <- ATS
usethis::use_data(raw_ats)
usethis::use_data(raw_ats, overwrite = TRUE)
prefilter(raw_ats, reftags)
load_all()
prefiltered_detects <- prefilter(raw_ats, reftags)
usethis::use_data(prefiltered_detects)
load_all()
add_fish(prefiltered_detects, cft_fish)
document()
cft_fish
get_fish_fields()
format_detects(data = filtered_detections,
var_Id = "tag_id",
var_datetime_local = "local_time",
var_receiver_serial = "serial",
local_time_zone = "America/Los_Angeles")
filtered_detections
filtered_detections %>% rename("tag_id" = Tag_Code,
"local_time" = DateTime_Local,
"serial"= ReceiverSN) -> filtered_detections
library(dplyr)
filtered_detections %>% rename("tag_id" = Tag_Code,
"local_time" = DateTime_Local,
"serial"= ReceiverSN) -> filtered_detections
usethis::use_data(filtered_detections)
usethis::use_data(filtered_detections, overwrite = TRUE)
load_all
load_all()
format_detects(data = filtered_detections,
var_Id = "tag_id",
var_datetime_local = "local_time",
var_receiver_serial = "serial",
local_time_zone = "America/Los_Angeles")
load_all
load_all()
format_detects(data = filtered_detections,
var_Id = "tag_id",
var_datetime_local = "local_time",
var_receiver_serial = "serial",
local_time_zone = "America/Los_Angeles")
format_detects(data = filtered_detections,
var_Id = "tag_id",
var_datetime_local = "local_time",
var_receiver_serial = "serial",
local_time_zone = "America/Los_Angeles",
time_format = "%m-%d-%Y %H:%M:%S)
format_detects(data = filtered_detections,
var_Id = "tag_id",
var_datetime_local = "local_time",
var_receiver_serial = "serial",
local_time_zone = "America/Los_Angeles",
time_format = "%m-%d-%Y %H:%M:%S")
View(filtered_detections)
format_detects(data = filtered_detections,
var_Id = "tag_id",
var_datetime_local = "local_time",
var_receiver_serial = "serial",
local_time_zone = "America/Los_Angeles",
time_format = "%Y-%m-%d %H:%M:%S")
fish
format_fish(data = fish,
var_Id = "TagCode",
var_release = "Release_Date",
var_tag_life = "TagLife",
var_ping_rate = "PRI",
local_time_zone = "America/Los_Angeles")
format_fish(data = fish,
var_Id = "TagCode",
var_release = "Release_Date",
var_tag_life = "TagLife",
var_ping_rate = "PRI",
local_time_zone = "America/Los_Angeles",
time_format = "%Y-%m-%d %H:%M:%S")
format_fish(data = fish,
var_Id = "TagCode",
var_release = "Release_Date",
var_tag_life = "TagLife",
var_ping_rate = "PRI",
local_time_zone = "America/Los_Angeles",
time_format = "%Y-%m-%d %H:%M:%S")
load_all()
format_fish(data = fish,
var_Id = "TagCode",
var_release = "Release_Date",
var_tag_life = "TagLife",
var_ping_rate = "PRI",
local_time_zone = "America/Los_Angeles",
time_format = "%Y-%m-%d %H:%M:%S")
rcvrs <- receivers
View(rcvrs)
load_all()
format_receivers(data = receivers,
var_receiver_serial = "receiver_serial_number",
var_receiver_make = "receiver_make",
var_receiver_deploy = "receiver_start",
var_receiver_retrieve = "receiver_end",
local_time_zone = "America/Los_Angeles",
time_format = "%m-%d-%Y %H:%M:%S")
document()
prefilter(raw_ats, reftags)
fish
fish <- fish
receivers <- receivers
prefiltered_detects
fish_detects
View(filtered_detections)
second_filter_tekno(prefiltered_detects)
filter_fish_detects <- add_fish(prefiltered_detects, cft_fish)
usethis::use_data(filter_fish_detects)
View(filter_fish_detects)
filter_fish_detects %>%
select(-c(Tag_Hex.y))->filter_fish_detects
usethis::use_data(filter_fish_detects, overwrite = TRUE)
second_filter_tekno(filter_fish_detects)
second_filter_ats(filter_fish_detects)
second_filter_tekno_4h(filter_fish_detects)
# Apply a four-hit ATS filter to a prefiltered dataset with fish and tag
# attributes
second_filter_ats_4h(filter_fish_detects)
# No detections are valid
second_filter_2h4h(filter_fish_detects)
second_filter_4h(filter_fish_detects)
document()
document()
check()
document()
document()
cft_rcvrs
load_all()
document()
check()
document()
document()
load(raw_ats)
attach(raw_ats)
ats <- raw_ats
View(ats)
document()
check()
document()
check()
document()
check()
tools::resaveRdaFiles("data/")
tools::resaveRdaFiles("extdata/")
tools::resaveRdaFiles("inst/extdata/")
check()
install.packages("readr")
read_file("inst/extdata/2015-6016210470906.SUM")
readr::read_file("inst/extdata/2015-6016210470906.SUM")
T2015-6016210470906 <- readr::read_file("inst/extdata/2015-6016210470906.SUM")
T2015-6016210470906 <- readr::read_file("inst/extdata/2015-6016210470906.SUM")
gc()
readr::datasource("inst/extdata/2015-6016210470906.SUM")
datasource(readr_example("mtcars.csv"))
`T2015-6016210470906` <- readr::read_file("inst/extdata/2015-6016210470906.SUM")
usethis::use_data(`T2015-6016210470906`)
`SR21023_210603_091321` <- readr::read_file("inst/extdata/SR21023_210603_091321.csv")
usethis::use_data(`SR21023_210603_091321`)
tools::resaveRdaFiles()
tools::checkRdaFiles()
tools::checkRdaFiles("/data")
tools::resaveRdaFiles("/data")
tools::resaveRdaFiles("data/")
tools::checkRdaFiles("data/")
devtools::run_examples()
check()
devtools::check_win_release()
devtools::check_mac_release()
build()
install()
library(filteRjsats)
# Choose a Directory
path <- system.file("extdata", package = "filteRjsats")
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)
# Get a list of Time Zones
# Not Run
# OlsonNames()
# Set Time Zone
timezone <- "America/Los_Angeles"
# Empty list to store dataframes
det_list <- list()
# Process each file in the list of files
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
# Get a list of reference tags
reference_tags <- get_reference_tags()
# View all the fish fields
get_fish_fields()
# NOT RUN
# Choose important fields if don't want all fields, shown are the minimum
# important_fields <- c("fish_type","tag_id_hex",
#                       "fish_release_date", "release_location",
#                       "release_latitude", "release_longitude",
#                       "tag_pulse_rate_interval_nominal",
#                       "tag_warranty_life", "fish_length_type",
#                       "fish_length","fish_weight")
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
# Empty list to store dataframes
fish_list <- list()
# Join fish data to detection and filter based on release date and battery
for(i in 1:length(pref_list)){
fish_file <- add_fish(pref_list[[i]], fish)
fish_list[[i]] <- fish_file
}
# Empty list to store dataframes
pref_list <- list()
# Apply prefilter
for(i in 1:length(det_list)){
prefilter_file <- prefilter(det_list[[i]], reference_tags)
pref_list[[i]] <- prefilter_file
}
# Empty list to store dataframes
fish_list <- list()
# Join fish data to detection and filter based on release date and battery
for(i in 1:length(pref_list)){
fish_file <- add_fish(pref_list[[i]], fish)
fish_list[[i]] <- fish_file
}
# Empty list to store dataframes
final_list <- list()
# Apply the final 2 hit or 4 hit filter
for(i in 1:length(fish_list)){
final_filter <- second_filter_2h4h(fish_list[[i]])
final_list[[i]] <- final_filter
}
# NOT RUN
# Alternately apply a 4 hit filter
# for(i in 1:length(fish_list)){
# final_filter <- second_filter_4h(fish_list[[i]])
# final_list[[i]] <- final_filter
# }
# View all the receiver metadta fields
get_rcvr_fields()
# NOT RUN
# # Choose important fields if don't want all fields, shown are the minimum
# rcvr_fields <- c("dep_id","receiver_serial_number","latitude","longitude",
#                  "receiver_location","receiver_river_km",
#                  "receiver_general_location","receiver_general_river_km",
#                  "receiver_beacon_id_hex", "receiver_start",
#                  "receiver_end")
#Get the receiver metadata
rcvr_data <- get_rcvr_data()
#Join the receiver metadata to the filtered detections
for(i in 1:length(final_list)){
out <- join_rcvr_data(final_list[[i]], rcvr_data)
final_list[[i]]
}
print(out)
check()
build()
tools::resaveRdaFiles()
tools::resaveRdaFiles("data/")
build()
# Choose a Directory
path <- system.file("extdata", package = "filteRjsats")
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)
# Get a list of Time Zones
# Not Run
# OlsonNames()
# Set Time Zone
timezone <- "America/Los_Angeles"
# Empty list to store dataframes
det_list <- list()
# Process each file in the list of files
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
# Get a list of reference tags
reference_tags <- get_reference_tags()
# Empty list to store dataframes
pref_list <- list()
# Apply prefilter
for(i in 1:length(det_list)){
prefilter_file <- prefilter(det_list[[i]], reference_tags)
pref_list[[i]] <- prefilter_file
}
# View all the fish fields
get_fish_fields()
# NOT RUN
# Choose important fields if don't want all fields, shown are the minimum
# important_fields <- c("fish_type","tag_id_hex",
#                       "fish_release_date", "release_location",
#                       "release_latitude", "release_longitude",
#                       "tag_pulse_rate_interval_nominal",
#                       "tag_warranty_life", "fish_length_type",
#                       "fish_length","fish_weight")
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
# Empty list to store dataframes
fish_list <- list()
# Join fish data to detection and filter based on release date and battery
for(i in 1:length(pref_list)){
fish_file <- add_fish(pref_list[[i]], fish)
fish_list[[i]] <- fish_file
}
# Empty list to store dataframes
final_list <- list()
# Apply the final 2 hit or 4 hit filter
for(i in 1:length(fish_list)){
final_filter <- second_filter_2h4h(fish_list[[i]])
final_list[[i]] <- final_filter
}
# NOT RUN
# Alternately apply a 4 hit filter
# for(i in 1:length(fish_list)){
# final_filter <- second_filter_4h(fish_list[[i]])
# final_list[[i]] <- final_filter
# }
# View all the receiver metadata fields
get_rcvr_fields()
# NOT RUN
# # Choose important fields if don't want all fields, shown are the minimum
# rcvr_fields <- c("dep_id","receiver_serial_number","latitude","longitude",
#                  "receiver_location","receiver_river_km",
#                  "receiver_general_location","receiver_general_river_km",
#                  "receiver_beacon_id_hex", "receiver_start",
#                  "receiver_end")
#Get the receiver metadata
rcvr_data <- get_rcvr_data()
#Join the receiver metadata to the filtered detections
for(i in 1:length(final_list)){
out <- join_rcvr_data(final_list[[i]], rcvr_data)
final_list[[i]]
}
print(final_list[[1]])
print(final_list[[2]])
build()
check()
read_ats(path = "inst/extdata", file = "17111___210531_115356.csv",
timezone = "America/Los_Angeles")
install()
read_ats(path = "inst/extdata", file = "17111___210531_115356.csv",
timezone = "America/Los_Angeles")
load_all()
read_ats(path = "inst/extdata", file = "17111___210531_115356.csv",
timezone = "America/Los_Angeles")
ats <- read_ats(path = "inst/extdata", file = "17111___210531_115356.csv",
timezone = "America/Los_Angeles")
View(ats)
library(dplyr)
ats %>% select(ReceiverSN,DateTime_Local,Tag_Hex)
ats %>% select(ReceiverSN,DateTime_Local,Tag_Hex) -> selected
selected %>% rename("serial" = ReceiverSN,"local_time" = DateTime_Local, "tag_id" = Tag_Hex)->selected
saveRDS(selected, file = "C:/Users/tspaulding/Documents/raw_detections.rds")
load_all()
document()
load_all
load_all()
document()
document()
load_all()
compare_detects(raw_ats,filter_fish_detects)
document()
x <- rnorm(n = 100, mean = 10, sd = 2)
rolling_sd_3(x)
x <- rnorm(n = 100, mean = 10, sd = 1)
rolling_sd_3(x)
set.seed(1234)
x <- rnorm(n = 100, mean = 10, sd = 1)
rolling_sd_3(x)
x <- rnorm(n = 100, mean = 10, sd = 1)
rolling_sd_3(x)
x <- rnorm(n = 100, mean = 10, sd = 1)
rolling_sd_3(x)
set.seed(1234)
x <- rnorm(n = 100, mean = 10, sd = 1)
rolling_sd_3(x)
set.seed(1234)
x <- rnorm(n = 100, mean = 10, sd = 1)
mean(rolling_sd_3(x), na.rm = T)
document()
second_filter_lotek(filter_fish_detects)
document()
devtools::run_examples()
list.files("test")
# Read the files
raw_data <- list()
# list of files
files <- system.file("extdata", package = "filteRjsats") |>
list.files()
# Read the files
raw_data <- list()
for(i in 1:length(files)){
raw_data[[i]] <- read_jsats(path = "extdata/", file = files[i],
timezone = "America/Los_Angeles")
}
for(i in 1:length(files)){
raw_data[[i]] <- read_jsats(path = "inst/extdata", file = files[i],
timezone = "America/Los_Angeles")
}
for(i in 1:length(files)){
raw_data[[i]] <- read_jsats(path = "inst/extdata", file = files[i],
timezone = "America/Los_Angeles")
}
document()
check()
document()
check()
check()
document()-
document()
document()
check()
system.file("extdata")
system.file("extdata/")
system.file("inst/extdata")
system.file("inst/extdata/")
system.file("inst/extdata/", package = "filteRjsats")
system.file("extdata/", package = "filteRjsats")
system.file("extdata/", package = "filteRjsats")->path
file.path(path,"2015-6007211361217.SUM")
document()
check()
document()
check()
build
build()
