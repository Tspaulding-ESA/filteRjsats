install.packages("styler")
use_package("broman")
use_package("lubridate")
use_package("tidyr")
use_package(stringr)
use_package("stringr")
use_package("rerddap","Suggests")
use_package("sdplyr")
use_package("dplyr")
use_gpl_license()
devtools::document()
rcvr_fields = c("dep_id",
"receiver_serial_number",
"latitude",
"longitude",
"receiver_location",
"receiver_river_km",
"receiver_general_location",
"receiver_general_river_km",
"receiver_beacon_id_hex",
"receiver_start",
"receiver_end")
use_data(rcvr_fields)
path <- choose.dir()
file <- list.files(path = path, recursive = TRUE)
det_list <- list()
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i], timezone)
det_list[[i]] <- jsats_file
}
timezone <- "America/Los_Angeles"
rm(timezone)
source("~/filteRjsats/R/read_files.R", echo=TRUE)
source("~/filteRjsats/R/read_files.R")
det_list <- list()
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i], timezone)
det_list[[i]] <- jsats_file
}
source("~/filteRjsats/R/read_files.R")
source("~/filteRjsats/R/read_files.R", echo=TRUE)
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i], timezone)
det_list[[i]] <- jsats_file
}
i = 1
jsats_file <- read_jsats(path, file[i], timezone)
jsats_file <- read_jsats(path, file[i])
file = file[i]
ATS <- data.frame(read.delim(file = file.path(path,file),
skip = 0))
colnames(ATS) <- "lines"
ATS$G72 = grepl("G72",ATS$lines)
ATS$commas = lengths(regmatches(ATS$lines, gregexpr(",",ATS$lines)))
ATS$valid = ifelse(ATS$G72 == TRUE & ATS$commas == 13, TRUE, FALSE)
ATS <- ATS[ATS$valid == TRUE,]
ATS <- tidyr::separate(data = ATS,
col = lines,
sep = ",",
into = c(NA,NA,NA,NA,'DateTime','TagCode',
'Tilt', 'VBatt', 'Temp', 'Pressure',
'SigStr', 'Bit_Period', 'Threshold'))
ATS$DT_Check = grepl('\\.',ATS$DateTime)
ATS <- ATS[ATS$DT_Check == TRUE,]
ATS$DT = lubridate::mdy_hms(ATS$DateTime, tz = timezone)
ATS$FullID = ATS$TagCode
ATS$FullID = ATS$TagCode
ATS$H = as.character(substr(ATS$TagCode,5,8)) #There's a space before the G
ATS$D = broman::hex2dec(ATS$H)
ATS$Tilt = as.numeric(ATS$Tilt)
ATS$Volt = as.numeric(ATS$VBatt)
ATS$Temp = as.numeric(ATS$Temp)
ATS$SigStr = as.numeric(ATS$SigStr)
ATS$BitPer = ATS$Bit_Period
ATS <- tidyr::separate(data = ATS,
col = BitPer,
into = c(NA,"B1","B2"),
sep = "\\s")
ATS <- tidyr::separate(data = ATS,
col = B2,
into = c("B3","B4"),
sep = c("/",","))
ATS$Freq = ifelse(is.na(ATS$B3),-999, 100000/(as.numeric(ATS$B1)+(as.numeric(ATS$B3)/31)))
ATS$Thres = ifelse(is.na(ATS$B3), -999, as.numeric(ATS$Threshold))
R <-  gsub("SR","",stringr::str_split(file, pattern = '\\.')[[1]][1])
R <- stringr::str_split(R,pattern = '_')[[1]][1]
ATS$R = R
ATS$R <- R
rep(R, length(ATS$DT))
i = 2
ATS <- data.frame(read.delim(file = file.path(path,file),
skip = 0))
colnames(ATS) <- "lines"
ATS$G72 = grepl("G72",ATS$lines)
ATS$commas = lengths(regmatches(ATS$lines, gregexpr(",",ATS$lines)))
ATS$valid = ifelse(ATS$G72 == TRUE & ATS$commas == 13, TRUE, FALSE)
ATS <- ATS[ATS$valid == TRUE,]
ATS <- tidyr::separate(data = ATS,
col = lines,
sep = ",",
into = c(NA,NA,NA,NA,'DateTime','TagCode',
'Tilt', 'VBatt', 'Temp', 'Pressure',
'SigStr', 'Bit_Period', 'Threshold'))
ATS$DT_Check = grepl('\\.',ATS$DateTime)
ATS <- ATS[ATS$DT_Check == TRUE,]
ATS$DT = lubridate::mdy_hms(ATS$DateTime, tz = timezone)
ATS$FullID = ATS$TagCode
ATS <- data.frame(read.delim(file = file.path(path,file),
skip = 0))
colnames(ATS) <- "lines"
ATS$G72 = grepl("G72",ATS$lines)
ATS$commas = lengths(regmatches(ATS$lines, gregexpr(",",ATS$lines)))
ATS$valid = ifelse(ATS$G72 == TRUE & ATS$commas == 13, TRUE, FALSE)
ATS <- ATS[ATS$valid == TRUE,]
ATS <- tidyr::separate(data = ATS,
col = lines,
sep = ",",
into = c(NA,NA,NA,NA,'DateTime','TagCode',
'Tilt', 'VBatt', 'Temp', 'Pressure',
'SigStr', 'Bit_Period', 'Threshold'))
ATS$DT_Check = grepl('\\.',ATS$DateTime)
ATS <- ATS[ATS$DT_Check == TRUE,]
ATS$DT = lubridate::mdy_hms(ATS$DateTime, tz = timezone)
ATS$FullID = ATS$TagCode
ATS$H = as.character(substr(ATS$TagCode,5,8)) #There's a space before the G
ATS$D = broman::hex2dec(ATS$H)
ATS$Tilt = as.numeric(ATS$Tilt)
ATS$Volt = as.numeric(ATS$VBatt)
ATS$Temp = as.numeric(ATS$Temp)
ATS$SigStr = as.numeric(ATS$SigStr)
ATS$BitPer = ATS$Bit_Period
ATS <- tidyr::separate(data = ATS,
col = BitPer,
into = c(NA,"B1","B2"),
sep = "\\s")
ATS <- tidyr::separate(data = ATS,
col = B2,
into = c("B3","B4"),
sep = c("/",","))
ATS$Freq = ifelse(is.na(ATS$B3),-999, 100000/(as.numeric(ATS$B1)+(as.numeric(ATS$B3)/31)))
ATS$Thres = ifelse(is.na(ATS$B3), -999, as.numeric(ATS$Threshold))
R <-  gsub("SR","",stringr::str_split(file, pattern = '\\.')[[1]][1])
R <- stringr::str_split(R,pattern = '_')[[1]][1]
ATS$R <- rep(R, length(ATS$DT))
source("~/filteRjsats/R/read_files.R")
jsats_file <- read_jsats(path, file[i])
# file_name <- stringr::str_split(file, pattern = '\\.')[[1]][1]
file_type <- ifelse(stringr::str_detect(file,'L'),
"Lotek",
ifelse(stringr::str_detect(file,'.SUM'),
"Teknologic",
"ATS"))
if(!(file_type %in% c("Lotek","Teknologic","ATS"))) jsats_file <- data.frame()
if(file_type == "Lotek") jsats_file <- read_lotek(path, file, timezone)
if(file_type == "Teknologic") jsats_file <- read_tekno(path, file, timezone)
if(file_type == "ATS") jsats_file <- read_ats(path, file, timezone)
#' This function takes a raw acoustic detection file generated by a Lotek,
#' Teknologic, or ATS JSATS receiver and determines which reader function to use
#' to process it into a dataframe which can be used by the filtering functions
#' in this package.
#'
#' @param path the path to the folder containing the desired file
#' @param file the path of the desired file
#' @param timezone the Olsen Named time zone, default is "America/Los_Angeles"
#' @return A dataframe converting the raw detection data into rows of detections
#' @export
read_jsats <- function(path, file, timezone="America/Los_Angeles"){
# file_name <- stringr::str_split(file, pattern = '\\.')[[1]][1]
file_type <- ifelse(stringr::str_detect(file,'L'),
"Lotek",
ifelse(stringr::str_detect(file,'.SUM'),
"Teknologic",
"ATS"))
if(!(file_type %in% c("Lotek","Teknologic","ATS"))) jsats_file <- data.frame()
if(file_type == "Lotek") jsats_file <- read_lotek(path, file, timezone)
if(file_type == "Teknologic") jsats_file <- read_tekno(path, file, timezone)
if(file_type == "ATS") jsats_file <- read_ats(path, file, timezone)
jsats_file
}
jsats_file <- read_jsats(path, file[i])
source("~/filteRjsats/R/read_files.R")
jsats_file <- read_jsats(path, file[i])
#' This function takes a raw acoustic detection file generated by a Lotek,
#' Teknologic, or ATS JSATS receiver and determines which reader function to use
#' to process it into a dataframe which can be used by the filtering functions
#' in this package.
#'
#' @param path the path to the folder containing the desired file
#' @param file the path of the desired file
#' @param timezone the Olsen Named time zone, default is "America/Los_Angeles"
#' @return A dataframe converting the raw detection data into rows of detections
#' @export
read_jsats <- function(path, file, timezone="America/Los_Angeles"){
# file_name <- stringr::str_split(file, pattern = '\\.')[[1]][1]
file_type <- ifelse(stringr::str_detect(file,'L'),
"Lotek",
ifelse(stringr::str_detect(file,'.SUM'),
"Teknologic",
"ATS"))
if(!(file_type %in% c("Lotek","Teknologic","ATS"))) {
jsats_file <- data.frame()
if(file_type == "Lotek") {jsats_file <- read_lotek(path, file, timezone)} else
if(file_type == "Teknologic") {jsats_file <- read_tekno(path, file, timezone)} else
if(file_type == "ATS") {jsats_file <- read_ats(path, file, timezone)}
jsats_file} else
{print("Not a Reciever File")}
}
jsats_file <- read_jsats(path, file[i])
if(file_type == "Lotek")
if(file_type == "Lotek") {jsats_file <- read_lotek(path, file, timezone)} else
if(file_type == "Teknologic") {jsats_file <- read_tekno(path, file, timezone)} else
if(file_type == "ATS") {jsats_file <- read_ats(path, file, timezone)}
x = NA
if(is.na(x)) {x=FALSE} else {if(x) {x}}
# file_name <- stringr::str_split(file, pattern = '\\.')[[1]][1]
file_type <- ifelse(stringr::str_detect(file,'L'),
"Lotek",
ifelse(stringr::str_detect(file,'.SUM'),
"Teknologic",
"ATS"))
if(!(file_type %in% c("Lotek","Teknologic","ATS"))) {
jsats_file <- data.frame()
if(file_type == "Lotek") {jsats_file <- read_lotek(path, file, timezone)}
else {if(file_type == "Teknologic") {jsats_file <- read_tekno(path,
file,
timezone)}
else {if(file_type == "ATS") {jsats_file <- read_ats(path,
file,
timezone)}
else {print("Error")}}}
jsats_file} else
#' This function takes a raw acoustic detection file generated by a Lotek,
#' Teknologic, or ATS JSATS receiver and determines which reader function to use
#' to process it into a dataframe which can be used by the filtering functions
#' in this package.
#'
#' @param path the path to the folder containing the desired file
#' @param file the path of the desired file
#' @param timezone the Olsen Named time zone, default is "America/Los_Angeles"
#' @return A dataframe converting the raw detection data into rows of detections
#' @export
read_jsats <- function(path, file, timezone="America/Los_Angeles"){
# file_name <- stringr::str_split(file, pattern = '\\.')[[1]][1]
file_type <- ifelse(stringr::str_detect(file,'L'),
"Lotek",
ifelse(stringr::str_detect(file,'.SUM'),
"Teknologic",
"ATS"))
if(!(file_type %in% c("Lotek","Teknologic","ATS"))) {
jsats_file <- data.frame()
if(file_type == "Lotek") {jsats_file <- read_lotek(path, file, timezone)}
else {if(file_type == "Teknologic") {jsats_file <- read_tekno(path,
file,
timezone)}
else {if(file_type == "ATS") {jsats_file <- read_ats(path,
file,
timezone)}
else {print("Error")}}}
jsats_file}
else {print("Not a Reciever File")}
}
# file_name <- stringr::str_split(file, pattern = '\\.')[[1]][1]
file_type <- ifelse(stringr::str_detect(file,'L'),
"Lotek",
ifelse(stringr::str_detect(file,'.SUM'),
"Teknologic",
"ATS"))
if(!(file_type %in% c("Lotek","Teknologic","ATS"))) {
jsats_file <- data.frame()
if(file_type == "Lotek") {jsats_file <- read_lotek(path, file, timezone)}
else {if(file_type == "Teknologic") {jsats_file <- read_tekno(path,
file,
timezone)}
else {if(file_type == "ATS") {jsats_file <- read_ats(path,
file,
timezone)}
else {print("Error")}}}
jsats_file}
(file_type %in% c("Lotek","Teknologic","ATS")
)
if(!(file_type %in% c("Lotek","Teknologic","ATS")))
#' This function takes a raw acoustic detection file generated by a Lotek,
#' Teknologic, or ATS JSATS receiver and determines which reader function to use
#' to process it into a dataframe which can be used by the filtering functions
#' in this package.
#'
#' @param path the path to the folder containing the desired file
#' @param file the path of the desired file
#' @param timezone the Olsen Named time zone, default is "America/Los_Angeles"
#' @return A dataframe converting the raw detection data into rows of detections
#' @export
read_jsats <- function(path, file, timezone="America/Los_Angeles"){
# file_name <- stringr::str_split(file, pattern = '\\.')[[1]][1]
file_type <- ifelse(stringr::str_detect(file,'L'),
"Lotek",
ifelse(stringr::str_detect(file,'.SUM'),
"Teknologic",
"ATS"))
ifelse(!(file_type %in% c("Lotek","Teknologic","ATS")),
{jsats_file <- data.frame()},
ifelse(file_type == "Lotek",{jsats_file <- read_lotek(path,
file,
timezone)},
ifelse(file_type == "Teknologic",{jsats_file <- read_tekno(path,
file,
timezone)},
ifelse(file_type == "ATS", {jsats_file <- read_ats(path,
file,
timezone)},
{print("Error")}))))
jsats_file
}
jsats_file <- read_jsats(path, file[i])
source("~/filteRjsats/R/read_files.R", echo=TRUE)
jsats_file <- read_jsats(path, file[i])
det_list <- list()
file <- list.files(path = path, recursive = TRUE)
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
View(det_list)
source("~/filteRjsats/R/read_files.R")
devtools::document()
usethis::use_vignette()
usethis::use_vignette("Filter JSATS Files")
usethis::use_vignette("filter")
library(filteRjsats)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(filteRjsats)
source("~/filteRjsats/R/erdapp_funs.R", echo=TRUE)
load("C:/Users/tspaulding/Documents/filteRjsats/data/rcvr_fields.rda")
rcvr_fields
devtools::document()
`rm(list = c("get_fish_fields", "get_rcvr_data", "get_rcvr_fields",
"get_reference_tags", "get_tagged_fish"))`
rm(list = c("get_fish_fields", "get_rcvr_data", "get_rcvr_fields",
"get_reference_tags", "get_tagged_fish"))
devtools::document()
load_all()
git remote add origin https://github.com/Tspaulding-ESA/filteRjsats
install.packages("filteRjsats")
install.packages("filteRjsats")
devtools::install_github("Tspaulding-ESA/filteRjsats")
devtools::install_github("Tspaulding-ESA/filteRjsats")
filteRjsats::rcvr_fields
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(filteRjsats)
# Choose a Directory
path <- "C:/Users/tspaulding/Documents/R/JSATS_Acoustic_Telemetry/1.Data/Inputs/raw/SR21030_210603_101039.csv"
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)
# Get a list of Time Zones
OlsonNames()
# Set Time Zone
timezone <- "America/Los_Angeles"
# Choose a Directory
path <- "C:/Users/tspaulding/Documents/R/JSATS_Acoustic_Telemetry/1.Data/Inputs/raw"
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)
# Get a list of Time Zones
OlsonNames()
# Set Time Zone
timezone <- "America/Los_Angeles"
# Empty list to store dataframes
det_list <- list()
# Process each file in the list of files
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
# Get a list of reference tags
reference_tags <- get_reference_tags()
# Get a list of reference tags
reference_tags <- get_reference_tags()
install_github("filteRjsats")
install_github("TSpaulding-ESA/filteRjsats")
detach("package:filteRjsats", unload = TRUE)
install_github("TSpaulding-ESA/filteRjsats")
# View all the receiver metadta fields
get_rcvr_fields()
# View all the receiver metadta fields
get_rcvr_fields()
load_all()
#Join the receiver metadata to the filtered detections
for(i in 1:length(final_list)){
out <- join_rcvr_data(final_list[[i]], rcvr_data)
final_list[[i]]
}
# Empty list to store dataframes
final_list <- list()
# Apply the final filter
for(i in 1:length(fish_list)){
final_filter <- second_filter(fish_list[[i]])
final_list[[i]] <- final_filter
}
# View all the fish fields
get_fish_fields()
# View all the fish fields
get_fish_fields()
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
```{r join fish data to detection dataframe, echo=TRUE}
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
# Empty list to store dataframes
fish_list <- list()
# Join fish data to detection and filter based on release date and battery
for(i in 1:length(pref_list)){
fish_file <- add_fish(pref_list[[i]], fish)
fish_list[[i]] <- fish_file
}
```{r get a list of reference tags, echo=TRUE}
```{r assign timezone, echo=TRUE}
# Set Time Zone
timezone <- "America/Los_Angeles"
# Set Time Zone
timezone <- "America/Los_Angeles"
```{r read a directory of raw jsats detection files, echo=TRUE}
# Empty list to store dataframes
det_list <- list()
# Process each file in the list of files
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
# Get a list of reference tags
reference_tags <- get_reference_tags()
# Empty list to store dataframes
pref_list <- list()
# Apply prefilter
for(i in 1:length(det_list)){
prefilter_file <- prefilter(det_list[[i]], reference_tags)
pref_list[[i]] <- prefilter_file
}
# View all the fish fields
get_fish_fields()
# NOT RUN
# Choose important fields if don't want all fields, shown are the minimum
# important_fields <- c("fish_type","tag_id_hex",
#                       "fish_release_date", "release_location",
#                       "release_latitude", "release_longitude",
#                       "tag_pulse_rate_interval_nominal",
#                       "tag_warranty_life", "fish_length_type",
#                       "fish_length","fish_weight")
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
# Empty list to store dataframes
fish_list <- list()
# Join fish data to detection and filter based on release date and battery
for(i in 1:length(pref_list)){
fish_file <- add_fish(pref_list[[i]], fish)
fish_list[[i]] <- fish_file
}
# Empty list to store dataframes
final_list <- list()
# Apply the final filter
for(i in 1:length(fish_list)){
final_filter <- second_filter(fish_list[[i]])
final_list[[i]] <- final_filter
}
# View all the receiver metadta fields
get_rcvr_fields()
# NOT RUN
# # Choose important fields if don't want all fields, shown are the minimum
# rcvr_fields <- c("dep_id","receiver_serial_number","latitude","longitude",
#                  "receiver_location","receiver_river_km",
#                  "receiver_general_location","receiver_general_river_km",
#                  "receiver_beacon_id_hex", "receiver_start",
#                  "receiver_end")
#Get the receiver metadata
rcvr_data <- get_rcvr_data()
#Join the receiver metadata to the filtered detections
for(i in 1:length(final_list)){
out <- join_rcvr_data(final_list[[i]], rcvr_data)
final_list[[i]]
}
View(final_list)
prefilter_file$TagInFile = prefilter_file$Tag_Hex %in% fish_tmp #Check for Study Tags
library(filteRjsats)
