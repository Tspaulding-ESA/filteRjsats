file,
timezone)},
ifelse(file_type == "Teknologic",{jsats_file <- read_tekno(path,
file,
timezone)},
ifelse(file_type == "ATS", {jsats_file <- read_ats(path,
file,
timezone)},
{print("Error")}))))
jsats_file
}
jsats_file <- read_jsats(path, file[i])
source("~/filteRjsats/R/read_files.R", echo=TRUE)
jsats_file <- read_jsats(path, file[i])
det_list <- list()
file <- list.files(path = path, recursive = TRUE)
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
View(det_list)
source("~/filteRjsats/R/read_files.R")
devtools::document()
usethis::use_vignette()
usethis::use_vignette("Filter JSATS Files")
usethis::use_vignette("filter")
library(filteRjsats)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(filteRjsats)
source("~/filteRjsats/R/erdapp_funs.R", echo=TRUE)
load("C:/Users/tspaulding/Documents/filteRjsats/data/rcvr_fields.rda")
rcvr_fields
devtools::document()
`rm(list = c("get_fish_fields", "get_rcvr_data", "get_rcvr_fields",
"get_reference_tags", "get_tagged_fish"))`
rm(list = c("get_fish_fields", "get_rcvr_data", "get_rcvr_fields",
"get_reference_tags", "get_tagged_fish"))
devtools::document()
load_all()
git remote add origin https://github.com/Tspaulding-ESA/filteRjsats
install.packages("filteRjsats")
install.packages("filteRjsats")
devtools::install_github("Tspaulding-ESA/filteRjsats")
devtools::install_github("Tspaulding-ESA/filteRjsats")
filteRjsats::rcvr_fields
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(filteRjsats)
# Choose a Directory
path <- "C:/Users/tspaulding/Documents/R/JSATS_Acoustic_Telemetry/1.Data/Inputs/raw/SR21030_210603_101039.csv"
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)
# Get a list of Time Zones
OlsonNames()
# Set Time Zone
timezone <- "America/Los_Angeles"
# Choose a Directory
path <- "C:/Users/tspaulding/Documents/R/JSATS_Acoustic_Telemetry/1.Data/Inputs/raw"
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)
# Get a list of Time Zones
OlsonNames()
# Set Time Zone
timezone <- "America/Los_Angeles"
# Empty list to store dataframes
det_list <- list()
# Process each file in the list of files
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
# Get a list of reference tags
reference_tags <- get_reference_tags()
# Get a list of reference tags
reference_tags <- get_reference_tags()
install_github("filteRjsats")
install_github("TSpaulding-ESA/filteRjsats")
detach("package:filteRjsats", unload = TRUE)
install_github("TSpaulding-ESA/filteRjsats")
# View all the receiver metadta fields
get_rcvr_fields()
# View all the receiver metadta fields
get_rcvr_fields()
load_all()
#Join the receiver metadata to the filtered detections
for(i in 1:length(final_list)){
out <- join_rcvr_data(final_list[[i]], rcvr_data)
final_list[[i]]
}
# Empty list to store dataframes
final_list <- list()
# Apply the final filter
for(i in 1:length(fish_list)){
final_filter <- second_filter(fish_list[[i]])
final_list[[i]] <- final_filter
}
# View all the fish fields
get_fish_fields()
# View all the fish fields
get_fish_fields()
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
```{r join fish data to detection dataframe, echo=TRUE}
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
# Empty list to store dataframes
fish_list <- list()
# Join fish data to detection and filter based on release date and battery
for(i in 1:length(pref_list)){
fish_file <- add_fish(pref_list[[i]], fish)
fish_list[[i]] <- fish_file
}
```{r get a list of reference tags, echo=TRUE}
```{r assign timezone, echo=TRUE}
# Set Time Zone
timezone <- "America/Los_Angeles"
# Set Time Zone
timezone <- "America/Los_Angeles"
```{r read a directory of raw jsats detection files, echo=TRUE}
# Empty list to store dataframes
det_list <- list()
# Process each file in the list of files
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
# Get a list of reference tags
reference_tags <- get_reference_tags()
# Empty list to store dataframes
pref_list <- list()
# Apply prefilter
for(i in 1:length(det_list)){
prefilter_file <- prefilter(det_list[[i]], reference_tags)
pref_list[[i]] <- prefilter_file
}
# View all the fish fields
get_fish_fields()
# NOT RUN
# Choose important fields if don't want all fields, shown are the minimum
# important_fields <- c("fish_type","tag_id_hex",
#                       "fish_release_date", "release_location",
#                       "release_latitude", "release_longitude",
#                       "tag_pulse_rate_interval_nominal",
#                       "tag_warranty_life", "fish_length_type",
#                       "fish_length","fish_weight")
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
# Empty list to store dataframes
fish_list <- list()
# Join fish data to detection and filter based on release date and battery
for(i in 1:length(pref_list)){
fish_file <- add_fish(pref_list[[i]], fish)
fish_list[[i]] <- fish_file
}
# Empty list to store dataframes
final_list <- list()
# Apply the final filter
for(i in 1:length(fish_list)){
final_filter <- second_filter(fish_list[[i]])
final_list[[i]] <- final_filter
}
# View all the receiver metadta fields
get_rcvr_fields()
# NOT RUN
# # Choose important fields if don't want all fields, shown are the minimum
# rcvr_fields <- c("dep_id","receiver_serial_number","latitude","longitude",
#                  "receiver_location","receiver_river_km",
#                  "receiver_general_location","receiver_general_river_km",
#                  "receiver_beacon_id_hex", "receiver_start",
#                  "receiver_end")
#Get the receiver metadata
rcvr_data <- get_rcvr_data()
#Join the receiver metadata to the filtered detections
for(i in 1:length(final_list)){
out <- join_rcvr_data(final_list[[i]], rcvr_data)
final_list[[i]]
}
View(final_list)
prefilter_file$TagInFile = prefilter_file$Tag_Hex %in% fish_tmp #Check for Study Tags
library(filteRjsats)
devtools::check()
library(filteRjsats)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(filteRjsats)
# Choose a Directory
path <- "C:/Users/tspaulding/Documents/R/JSATS_Acoustic_Telemetry/1.Data/Inputs/raw"
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)[1]
# Get a list of Time Zones
# Not Run
# OlsonNames()
# Set Time Zone
timezone <- "America/Los_Angeles"
# Empty list to store dataframes
det_list <- list()
# Process each file in the list of files
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
# Get a list of reference tags
reference_tags <- get_reference_tags()
# Empty list to store dataframes
pref_list <- list()
# Apply prefilter
for(i in 1:length(det_list)){
prefilter_file <- prefilter(det_list[[i]], reference_tags)
pref_list[[i]] <- prefilter_file
}
# Empty list to store dataframes
pref_list <- list()
# Apply prefilter
for(i in 1:length(det_list)){
prefilter_file <- prefilter(det_list[[i]], reference_tags)
pref_list[[i]] <- prefilter_file
}
# View all the fish fields
get_fish_fields()
# NOT RUN
# Choose important fields if don't want all fields, shown are the minimum
# important_fields <- c("fish_type","tag_id_hex",
#                       "fish_release_date", "release_location",
#                       "release_latitude", "release_longitude",
#                       "tag_pulse_rate_interval_nominal",
#                       "tag_warranty_life", "fish_length_type",
#                       "fish_length","fish_weight")
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
# Empty list to store dataframes
fish_list <- list()
# Join fish data to detection and filter based on release date and battery
for(i in 1:length(pref_list)){
fish_file <- add_fish(pref_list[[i]], fish)
fish_list[[i]] <- fish_file
}
View(fish)
# Empty list to store dataframes
final_list <- list()
# Apply the final filter
for(i in 1:length(fish_list)){
final_filter <- second_filter(fish_list[[i]])
final_list[[i]] <- final_filter
}
# Empty list to store dataframes
final_list <- list()
# Apply the final 2 hit or 4 hit filter
for(i in 1:length(fish_list)){
final_filter <- second_filter_2h4h(fish_list[[i]])
final_list[[i]] <- final_filter
}
load_all()
#'
#' This function takes any acoustic receiver detection dataframe generated from
#' the add_fish() function and filters it a second time to remove any remaining
#' multipath detections. Then depending on the type of receiver file applies an
#' algorithm to assess and filter all remaining detections based on 2 or 4 hits.
#'
#'
#' @param fish_file a dataframe of detections retrieved from add_fish()
#' @return A dataframe which has been filtered to remove false positives
#' @export
second_filter_2h4h <- function(fish_file){
ifelse(fish_file$Make[1] == "Lotek",
final_file <- second_filter_lotek(fish_file),
ifelse(fish_file$Make[1] == "Tekno",
final_file <- second_filter_tekno(fish_file),
ifelse(fish_file$Make[1] == "ATS",
final_file <- second_filter_ats(fish_file),
print("No Detections"))))
message(paste0("Number of Valid Tag IDs: ", length(unique(final_file$Tag_Hex))))
message(paste0("Number of Valid Detections: ", length(final_file$DateTime_Local)))
spur <- compare_df(fish_file, final_file)
message(paste0("Number of Spurious Tag IDs: ", length(unique(spur$Tag_Hex))))
message(paste0("Number of Spurious Detections: ", length(spur$DateTime_Local)))
final_file
}
#'
#' This function takes any acoustic receiver detection dataframe generated from
#' the add_fish() function and filters it a second time to remove any remaining
#' multipath detections. Then applies an algorithm to assess and filter all
#' remaining detections based on a four hit filter.
#'
#'
#' @param fish_file a dataframe of detections retrieved from add_fish()
#' @return A dataframe which has been filtered to remove false positives
#' @export
second_filter_4h <- function(fish_file){
ifelse(fish_file$Make[1] == "Lotek",
final_file <- second_filter_lotek(fish_file),
ifelse(fish_file$Make[1] == "Tekno",
final_file <- second_filter_tekno_4h(fish_file),
ifelse(fish_file$Make[1] == "ATS",
final_file <- second_filter_ats_4h(fish_file),
print("No Detections"))))
message(paste0("Number of Valid Tag IDs: ", length(unique(final_file$Tag_Hex))))
message(paste0("Number of Valid Detections: ", length(final_file$DateTime_Local)))
spur <- compare_df(fish_file, final_file)
message(paste0("Number of Spurious Tag IDs: ", length(unique(spur$Tag_Hex))))
message(paste0("Number of Spurious Detections: ", length(spur$DateTime_Local)))
final_file
}
# Empty list to store dataframes
final_list <- list()
# Apply the final 2 hit or 4 hit filter
for(i in 1:length(fish_list)){
final_filter <- second_filter_2h4h(fish_list[[i]])
final_list[[i]] <- final_filter
}
# Choose a Directory
path <- "C:/Users/tspaulding/Documents/R/JSATS_Acoustic_Telemetry/1.Data/Inputs/raw"
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)
# Empty list to store dataframes
det_list <- list()
# Process each file in the list of files
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
# Process each file in the list of files
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
```{r get a list of reference tags, echo=TRUE}
# Get a list of reference tags
reference_tags <- get_reference_tags()
# Empty list to store dataframes
pref_list <- list()
# Apply prefilter
for(i in 1:length(det_list)){
prefilter_file <- prefilter(det_list[[i]], reference_tags)
pref_list[[i]] <- prefilter_file
}
# View all the fish fields
get_fish_fields()
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
# Empty list to store dataframes
fish_list <- list()
# Join fish data to detection and filter based on release date and battery
for(i in 1:length(pref_list)){
fish_file <- add_fish(pref_list[[i]], fish)
fish_list[[i]] <- fish_file
}
# Empty list to store dataframes
final_list <- list()
# Apply the final 2 hit or 4 hit filter
for(i in 1:length(fish_list)){
final_filter <- second_filter_2h4h(fish_list[[i]])
final_list[[i]] <- final_filter
}
# NOT RUN
# Alternately apply a 4 hit filter
for(i in 1:length(fish_list)){
final_filter <- second_filter_4h(fish_list[[i]])
final_list[[i]] <- final_filter
}
View(fish)
filtered <- fish_file
filtered$pr_nom <- as.numeric(filtered$tag_pulse_rate_interval_nominal)
filtered <- dplyr::group_by(.data = filtered, Tag_Hex)
filtered <- dplyr::group_by(.data = filtered, Tag_Hex)
filtered <- dplyr::arrange(.data = filtered, Tag_Hex, DateTime_Local)
filtered$td = difftime(filtered$DateTime_Local,
dplyr::lag(filtered$DateTime_Local), #compare the time difference between each hit
units = "secs")
det_count <- dplyr::summarise(filtered, det_count = dplyr::n())
filtered <- dplyr::left_join(filtered, det_count, by = "Tag_Hex")
filtered$multipath <- ifelse(filtered$td > 0.3 | is.na(filtered$td), FALSE, TRUE) #identify any remaining multipath
filtered$multipath <- ifelse(filtered$multipath == TRUE &
dplyr::lead(filtered$multipath == FALSE),
FALSE,
filtered$multipath)
filtered <- filtered[filtered$det_count > 3 & filtered$multipath == FALSE,] #first filter out any final multipath and any tags with <3 detects
filtered$td = difftime(filtered$DateTime_Local,
dplyr::lag(filtered$DateTime_Local), # recalculate time diff
units = "secs")
filtered <- filtered[filtered$td > 0.8*filtered$pr_nom|is.na(filtered$td),] # Remove short PRIs as false positives
filtered$td = difftime(filtered$DateTime_Local,
dplyr::lag(filtered$DateTime_Local), # recalculate time diff
units = "secs")
# Calculating for every two hits
filtered$tdiff = as.numeric(filtered$td)/round(as.numeric(filtered$td)/as.numeric(filtered$pr_nom))
filtered$tdiff = ifelse(is.infinite(filtered$tdiff),NA,filtered$tdiff)
filtered$tdiff = round(filtered$tdiff*100)/100
filtered$tdiff = ifelse(is.na(filtered$tdiff),
dplyr::lead(filtered$tdiff),
filtered$tdiff)
filtered$FreqDiff = abs(filtered$Freq - dplyr::lead(filtered$Freq))
filtered$freq_check = ifelse(filtered$FreqDiff < 0.505|
is.na(filtered$FreqDiff),
TRUE,
FALSE)
filtered$pr_check = ifelse(filtered$td < filtered$pr_nom*4 |
is.na(filtered$td),
TRUE,
FALSE)
filtered$pr_check = ifelse(filtered$pr_check == FALSE &
dplyr::lead(filtered$td) < filtered$pr_nom*4,
TRUE,
filtered$pr_check)
filtered <- filtered[filtered$pr_check == TRUE &
filtered$freq_check == TRUE,]
filtered <- filtered[abs(as.numeric(filtered$pr_nom)-as.numeric(filtered$tdiff)) < (as.numeric(filtered$pr_nom)*0.1) &
filtered$Freq > 416.30 &
filtered$Freq < 418.75,]
filtered <- dplyr::select(filtered, -c(det_count))
det_count <- dplyr::summarise(filtered, det_count = dplyr::n())
filtered <- dplyr::left_join(filtered, det_count, by = "Tag_Hex")
filtered
filtered <- fish_file
filtered$pr_nom <- as.numeric(filtered$tag_pulse_rate_interval_nominal)
filtered <- dplyr::group_by(.data = filtered, Tag_Hex)
filtered <- dplyr::group_by(.data = filtered, Tag_Hex)
filtered <- dplyr::arrange(.data = filtered, Tag_Hex, DateTime_Local)
filtered$td = difftime(filtered$DateTime_Local,
dplyr::lag(filtered$DateTime_Local), #compare the time difference between each hit
units = "secs")
det_count <- dplyr::summarise(filtered, det_count = dplyr::n())
filtered <- dplyr::left_join(filtered, det_count, by = "Tag_Hex")
filtered$multipath <- ifelse(filtered$td > 0.3 | is.na(filtered$td), FALSE, TRUE) #identify any remaining multipath
filtered$multipath <- ifelse(filtered$multipath == TRUE &
dplyr::lead(filtered$multipath == FALSE),
FALSE,
filtered$multipath)
filtered <- filtered[filtered$det_count > 3 & filtered$multipath == FALSE,] #first filter out any final multipath and any tags with <3 detects
filtered$td = difftime(filtered$DateTime_Local,
dplyr::lag(filtered$DateTime_Local), # recalculate time diff
units = "secs")
filtered <- filtered[filtered$td > 0.8*filtered$pr_nom|is.na(filtered$td),] # Remove short PRIs as false positives
filtered$td = difftime(filtered$DateTime_Local,
dplyr::lag(filtered$DateTime_Local), # recalculate time diff
units = "secs")
# Calculating for every four hits
filtered$tdiff = as.numeric(filtered$td)/round(as.numeric(filtered$td)/as.numeric(filtered$pr_nom))
filtered$tdiff = ifelse(is.infinite(filtered$tdiff),NA,filtered$tdiff)
filtered$tdiff = round(filtered$tdiff*100)/100
filtered$tdiff = ifelse(is.na(filtered$tdiff),
dplyr::lead(filtered$tdiff),
filtered$tdiff)
filtered$cs <- difftime(dplyr::lead(filtered$DateTime_Local,3),
filtered$DateTime_Local,
units = "secs")
filtered$pr <- as.numeric(filtered$tag_pulse_rate_interval_nominal)
filtered <- filtered[filtered$cs < filtered$pr*16.6 | is.na(filtered$cs),]
filtered$v1 = abs(filtered$pr-filtered$tdiff) < pr*0.20
filtered$v2 = abs(filtered$pr-dplyr::lead(filtered$tdiff)) < filtered$pr*0.20
filtered$pr <- as.numeric(filtered$tag_pulse_rate_interval_nominal)
filtered <- filtered[filtered$cs < filtered$pr_nom*16.6 | is.na(filtered$cs),]
filtered$v1 = abs(filtered$pr_nom-filtered$tdiff) < pr_nom*0.20
filtered$v1 = abs(filtered$pr_nom-filtered$tdiff) < filtered$pr_nom*0.20
filtered$v2 = abs(filtered$pr_nom-dplyr::lead(filtered$tdiff)) < filtered$pr_nom*0.20
filtered$v3 = abs(filtered$pr_nom-dplyr::lead(filtered$tdiff,2)) < filtered$pr_nom*0.20
filtered$sd_roll_check = rolling_sd_3(as.numeric(filtered$pr_nom)) < 0.025
library(dplyr)
filtered$sd_roll_check = rolling_sd_3(as.numeric(filtered$pr_nom)) < 0.025
filtered$sd_roll_check = ifelse(is.na(filtered$sd_roll_check),
TRUE,
filtered$sd_roll_check)
filtered$FreqDiff = abs(filtered$Freq - dplyr::lead(filtered$Freq))
filtered$freq_check = ifelse(filtered$FreqDiff < 0.505|
is.na(filtered$FreqDiff),
TRUE,
FALSE)
filtered$pr_check = ifelse(filtered$td < filtered$pr_nom*4 |
is.na(filtered$td),
TRUE,
FALSE)
filtered$pr_check = ifelse(filtered$pr_check == FALSE &
dplyr::lead(filtered$td) < filtered$pr_nom*4,
TRUE,
filtered$pr_check)
filtered <- filtered[filtered$pr_check == TRUE &
filtered$freq_check == TRUE &
filtered$v1 == TRUE &
filtered$v2 == TRUE &
filtered$v3 == TRUE &
filtered$sd_roll_check == TRUE,]
filtered <- filtered[abs(as.numeric(filtered$pr_nom)-as.numeric(filtered$tdiff)) < (as.numeric(filtered$pr_nom)*0.1) &
filtered$Freq > 416.30 &
filtered$Freq < 418.75,]
filtered <- dplyr::select(filtered, -c(det_count))
det_count <- dplyr::summarise(filtered, det_count = dplyr::n())
filtered <- dplyr::left_join(filtered, det_count, by = "Tag_Hex")
filtered
load_all()
load_all()
# NOT RUN
# Alternately apply a 4 hit filter
for(i in 1:length(fish_list)){
final_filter <- second_filter_4h(fish_list[[i]])
final_list[[i]] <- final_filter
}
check()
rm(list = c("second_filter_2h4h", "second_filter_4h"))
check()
load_all()
check()
load_all()
check()
document()
