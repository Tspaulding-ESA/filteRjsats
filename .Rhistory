for(i in 1:length(det_list)){
prefilter_file <- prefilter(det_list[[i]], reference_tags)
pref_list[[i]] <- prefilter_file
}
# View all the fish fields
get_fish_fields()
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
# Empty list to store dataframes
fish_list <- list()
# Join fish data to detection and filter based on release date and battery
for(i in 1:length(pref_list)){
fish_file <- add_fish(pref_list[[i]], fish)
fish_list[[i]] <- fish_file
}
# Empty list to store dataframes
final_list <- list()
# Apply the final 2 hit or 4 hit filter
for(i in 1:length(fish_list)){
final_filter <- second_filter_2h4h(fish_list[[i]])
final_list[[i]] <- final_filter
}
# NOT RUN
# Alternately apply a 4 hit filter
for(i in 1:length(fish_list)){
final_filter <- second_filter_4h(fish_list[[i]])
final_list[[i]] <- final_filter
}
View(fish)
filtered <- fish_file
filtered$pr_nom <- as.numeric(filtered$tag_pulse_rate_interval_nominal)
filtered <- dplyr::group_by(.data = filtered, Tag_Hex)
filtered <- dplyr::group_by(.data = filtered, Tag_Hex)
filtered <- dplyr::arrange(.data = filtered, Tag_Hex, DateTime_Local)
filtered$td = difftime(filtered$DateTime_Local,
dplyr::lag(filtered$DateTime_Local), #compare the time difference between each hit
units = "secs")
det_count <- dplyr::summarise(filtered, det_count = dplyr::n())
filtered <- dplyr::left_join(filtered, det_count, by = "Tag_Hex")
filtered$multipath <- ifelse(filtered$td > 0.3 | is.na(filtered$td), FALSE, TRUE) #identify any remaining multipath
filtered$multipath <- ifelse(filtered$multipath == TRUE &
dplyr::lead(filtered$multipath == FALSE),
FALSE,
filtered$multipath)
filtered <- filtered[filtered$det_count > 3 & filtered$multipath == FALSE,] #first filter out any final multipath and any tags with <3 detects
filtered$td = difftime(filtered$DateTime_Local,
dplyr::lag(filtered$DateTime_Local), # recalculate time diff
units = "secs")
filtered <- filtered[filtered$td > 0.8*filtered$pr_nom|is.na(filtered$td),] # Remove short PRIs as false positives
filtered$td = difftime(filtered$DateTime_Local,
dplyr::lag(filtered$DateTime_Local), # recalculate time diff
units = "secs")
# Calculating for every two hits
filtered$tdiff = as.numeric(filtered$td)/round(as.numeric(filtered$td)/as.numeric(filtered$pr_nom))
filtered$tdiff = ifelse(is.infinite(filtered$tdiff),NA,filtered$tdiff)
filtered$tdiff = round(filtered$tdiff*100)/100
filtered$tdiff = ifelse(is.na(filtered$tdiff),
dplyr::lead(filtered$tdiff),
filtered$tdiff)
filtered$FreqDiff = abs(filtered$Freq - dplyr::lead(filtered$Freq))
filtered$freq_check = ifelse(filtered$FreqDiff < 0.505|
is.na(filtered$FreqDiff),
TRUE,
FALSE)
filtered$pr_check = ifelse(filtered$td < filtered$pr_nom*4 |
is.na(filtered$td),
TRUE,
FALSE)
filtered$pr_check = ifelse(filtered$pr_check == FALSE &
dplyr::lead(filtered$td) < filtered$pr_nom*4,
TRUE,
filtered$pr_check)
filtered <- filtered[filtered$pr_check == TRUE &
filtered$freq_check == TRUE,]
filtered <- filtered[abs(as.numeric(filtered$pr_nom)-as.numeric(filtered$tdiff)) < (as.numeric(filtered$pr_nom)*0.1) &
filtered$Freq > 416.30 &
filtered$Freq < 418.75,]
filtered <- dplyr::select(filtered, -c(det_count))
det_count <- dplyr::summarise(filtered, det_count = dplyr::n())
filtered <- dplyr::left_join(filtered, det_count, by = "Tag_Hex")
filtered
filtered <- fish_file
filtered$pr_nom <- as.numeric(filtered$tag_pulse_rate_interval_nominal)
filtered <- dplyr::group_by(.data = filtered, Tag_Hex)
filtered <- dplyr::group_by(.data = filtered, Tag_Hex)
filtered <- dplyr::arrange(.data = filtered, Tag_Hex, DateTime_Local)
filtered$td = difftime(filtered$DateTime_Local,
dplyr::lag(filtered$DateTime_Local), #compare the time difference between each hit
units = "secs")
det_count <- dplyr::summarise(filtered, det_count = dplyr::n())
filtered <- dplyr::left_join(filtered, det_count, by = "Tag_Hex")
filtered$multipath <- ifelse(filtered$td > 0.3 | is.na(filtered$td), FALSE, TRUE) #identify any remaining multipath
filtered$multipath <- ifelse(filtered$multipath == TRUE &
dplyr::lead(filtered$multipath == FALSE),
FALSE,
filtered$multipath)
filtered <- filtered[filtered$det_count > 3 & filtered$multipath == FALSE,] #first filter out any final multipath and any tags with <3 detects
filtered$td = difftime(filtered$DateTime_Local,
dplyr::lag(filtered$DateTime_Local), # recalculate time diff
units = "secs")
filtered <- filtered[filtered$td > 0.8*filtered$pr_nom|is.na(filtered$td),] # Remove short PRIs as false positives
filtered$td = difftime(filtered$DateTime_Local,
dplyr::lag(filtered$DateTime_Local), # recalculate time diff
units = "secs")
# Calculating for every four hits
filtered$tdiff = as.numeric(filtered$td)/round(as.numeric(filtered$td)/as.numeric(filtered$pr_nom))
filtered$tdiff = ifelse(is.infinite(filtered$tdiff),NA,filtered$tdiff)
filtered$tdiff = round(filtered$tdiff*100)/100
filtered$tdiff = ifelse(is.na(filtered$tdiff),
dplyr::lead(filtered$tdiff),
filtered$tdiff)
filtered$cs <- difftime(dplyr::lead(filtered$DateTime_Local,3),
filtered$DateTime_Local,
units = "secs")
filtered$pr <- as.numeric(filtered$tag_pulse_rate_interval_nominal)
filtered <- filtered[filtered$cs < filtered$pr*16.6 | is.na(filtered$cs),]
filtered$v1 = abs(filtered$pr-filtered$tdiff) < pr*0.20
filtered$v2 = abs(filtered$pr-dplyr::lead(filtered$tdiff)) < filtered$pr*0.20
filtered$pr <- as.numeric(filtered$tag_pulse_rate_interval_nominal)
filtered <- filtered[filtered$cs < filtered$pr_nom*16.6 | is.na(filtered$cs),]
filtered$v1 = abs(filtered$pr_nom-filtered$tdiff) < pr_nom*0.20
filtered$v1 = abs(filtered$pr_nom-filtered$tdiff) < filtered$pr_nom*0.20
filtered$v2 = abs(filtered$pr_nom-dplyr::lead(filtered$tdiff)) < filtered$pr_nom*0.20
filtered$v3 = abs(filtered$pr_nom-dplyr::lead(filtered$tdiff,2)) < filtered$pr_nom*0.20
filtered$sd_roll_check = rolling_sd_3(as.numeric(filtered$pr_nom)) < 0.025
library(dplyr)
filtered$sd_roll_check = rolling_sd_3(as.numeric(filtered$pr_nom)) < 0.025
filtered$sd_roll_check = ifelse(is.na(filtered$sd_roll_check),
TRUE,
filtered$sd_roll_check)
filtered$FreqDiff = abs(filtered$Freq - dplyr::lead(filtered$Freq))
filtered$freq_check = ifelse(filtered$FreqDiff < 0.505|
is.na(filtered$FreqDiff),
TRUE,
FALSE)
filtered$pr_check = ifelse(filtered$td < filtered$pr_nom*4 |
is.na(filtered$td),
TRUE,
FALSE)
filtered$pr_check = ifelse(filtered$pr_check == FALSE &
dplyr::lead(filtered$td) < filtered$pr_nom*4,
TRUE,
filtered$pr_check)
filtered <- filtered[filtered$pr_check == TRUE &
filtered$freq_check == TRUE &
filtered$v1 == TRUE &
filtered$v2 == TRUE &
filtered$v3 == TRUE &
filtered$sd_roll_check == TRUE,]
filtered <- filtered[abs(as.numeric(filtered$pr_nom)-as.numeric(filtered$tdiff)) < (as.numeric(filtered$pr_nom)*0.1) &
filtered$Freq > 416.30 &
filtered$Freq < 418.75,]
filtered <- dplyr::select(filtered, -c(det_count))
det_count <- dplyr::summarise(filtered, det_count = dplyr::n())
filtered <- dplyr::left_join(filtered, det_count, by = "Tag_Hex")
filtered
load_all()
load_all()
# NOT RUN
# Alternately apply a 4 hit filter
for(i in 1:length(fish_list)){
final_filter <- second_filter_4h(fish_list[[i]])
final_list[[i]] <- final_filter
}
check()
rm(list = c("second_filter_2h4h", "second_filter_4h"))
check()
load_all()
check()
load_all()
check()
document()
document()
check()
check()
library(filteRjsats)
# Choose a Directory
path <- "C:/Users/tspaulding/Documents/R/JSATS_Acoustic_Telemetry/1.Data/Inputs/raw"
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)
library(filteRjsats)
# Set Time Zone
timezone <- "America/Los_Angeles"
# Set Time Zone
timezone <- "America/Los_Angeles"
```{r read a directory of raw jsats detection files, echo=TRUE}
---
title: "filter"
```{r, include = FALSE}
---
title: "filter"
```{r, include = FALSE}
# Choose a Directory
path <- "C:/Users/tspaulding/Documents/R/JSATS_Acoustic_Telemetry/1.Data/Inputs/raw"
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)
# Set Time Zone
timezone <- "America/Los_Angeles"
# Empty list to store dataframes
det_list <- list()
jsats_file <- read_jsats(path, file[i])
i = 1
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
View(det_list)
# Get a list of reference tags
reference_tags <- get_reference_tags()
# Empty list to store dataframes
pref_list <- list()
prefilter_file <- prefilter(det_list[[i]], reference_tags)
jsats_file <- det_list[[1]]
temp <- jsats_file
temp <- dplyr::arrange(.data = temp,Tag_Hex)
temp <- dplyr::group_by(.data = temp, Tag_Hex)
temp <- dplyr::arrange(.data = temp, Tag_Hex, DateTime_Local)
det_count <- dplyr::summarise(temp, det_count = dplyr::n())
temp <- dplyr::left_join(temp, det_count, by = "Tag_Hex")
temp <- temp[temp$det_count > 1,]
temp$time_diff_lag = difftime(temp$DateTime_Local, dplyr::lag(temp$DateTime_Local),
units = "secs")
temp$multipath = ifelse(temp$time_diff_lag > lubridate::seconds(0.3)|
temp$Tag_Hex != dplyr::lag(temp$Tag_Hex), FALSE, TRUE)
temp$multipath = ifelse(is.na(temp$time_diff_lag) &
dplyr::lead(temp$multipath) == FALSE,
FALSE,
ifelse(is.na(temp$time_diff_lag),
TRUE,
temp$multipath))
temp <- temp[temp$multipath == FALSE,] # filter out Multipath
temp$time_diff_lag = difftime(temp$DateTime_Local, dplyr::lag(temp$DateTime_Local),
units = "secs")
temp$time_diff_lag = ifelse(temp$Tag_Hex != dplyr::lag(temp$Tag_Hex),NA,temp$time_diff_lag)
temp$RefTag = ifelse(temp$Tag_Decimal %in% reference_tags, TRUE, FALSE) #Is it a ref tag?
temp$CheckMBP = ifelse(temp$RefTag == TRUE, # If a ref tag,
(temp$time_diff_lag < lubridate::seconds(3*64)), # 2 hits in 3*Max PRI
(temp$time_diff_lag < lubridate::seconds(12*10))) # 2 hits in 12*Max PRI
temp$CheckMBP = ifelse(is.na(temp$time_diff_lag) & dplyr::lead(temp$CheckMBP) == FALSE, #First Detection is FALSE if 2nd is FALSE
FALSE,
ifelse(is.na(temp$time_diff_lag),
TRUE,
temp$CheckMBP)) #Otherwise it's valid
temp$CheckMBP = ifelse(temp$CheckMBP == FALSE & !is.na(dplyr::lead(temp$time_diff_lag)) &
dplyr::lead(temp$time_diff_lag) < lubridate::seconds(12*10), #If invalid based on last detection, but following detection is <120s
TRUE, #Valid
temp$CheckMBP) #Return Previous Assignment
temp <- temp[temp$CheckMBP == TRUE,]
temp <- temp[,-c(`det_count`)]
temp <- temp[,-c(det_count)]
temp <- temp[,-c("det_count")]
temp <- temp[,-"det_count"]
temp <- temp[,-"det_count"]
temp <- dplyr::select(.data =  temp,
-c(`det_count`))
det_count <- dplyr::summarise(temp, det_count = dplyr::n())
temp <- dplyr::left_join(temp, `det_count`, by = "Tag_Hex")
temp <- temp[temp$det_count.y > 1,]
temp <- temp[temp$det_count > 1,]
temp <- dplyr::ungroup(temp)
temp <- dplyr::select(.data =  temp,
-c(time_diff_lag,multipath,RefTag,`det_count`))
temp <- dplyr::arrange(temp, ReceiverSN, Tag_Hex, DateTime_Local)
temp <- temp[!is.na(temp$DateTime_Local),]
prefilter_file <- temp
prefilter_file
check()
check()
document()
check()
check()
check()
globalVariables(c('B2', 'BitPer', 'DateTime_Local', 'Freq', 'Make', 'ReceiverSN',
'RefTag', 'SigStr', 'Tag_Decimal', 'Tag_Hex', 'Temp', 'Thres',
'Tilt', 'Volt', 'fish_release_date', 'lines', 'multipath',
'rcvr_fields', 'read.csv', 'read.delim',
'receiver_beacon_id_hex;', 'receiver_retrieve',
'receiver_serial_number', 'receiver_start', 'setTxtProgressBar',
'tag_life', 'tag_pulse_rate_interval_nominal', 'time_diff_lag',
'txtProgressBar'))
check()
check()
document()
document()
document()
document()
document()
check()
check()
check()
document()
build()
library(filteRjsats)
# Choose a Directory
path <- path("extdata")
# Choose a Directory
path <- system.file("extdata")
# Choose a Directory
path <- system.file("inst/extdata")
# Choose a Directory
path <- dir("inst/extdata")
# Choose a Directory
path <- dir("inst")
# Choose a Directory
path <- dir("inst", full.names = TRUE)
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)
# Set Time Zone
timezone <- "America/Los_Angeles"
# Empty list to store dataframes
det_list <- list()
# Process each file in the list of files
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
# Get a list of reference tags
reference_tags <- get_reference_tags()
# Empty list to store dataframes
pref_list <- list()
# Apply prefilter
for(i in 1:length(det_list)){
prefilter_file <- prefilter(det_list[[i]], reference_tags)
pref_list[[i]] <- prefilter_file
}
# View all the fish fields
get_fish_fields()
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
# Empty list to store dataframes
fish_list <- list()
# Join fish data to detection and filter based on release date and battery
for(i in 1:length(pref_list)){
fish_file <- add_fish(pref_list[[i]], fish)
fish_list[[i]] <- fish_file
}
# Empty list to store dataframes
final_list <- list()
# Apply the final 2 hit or 4 hit filter
for(i in 1:length(fish_list)){
final_filter <- second_filter_2h4h(fish_list[[i]])
final_list[[i]] <- final_filter
}
# View all the receiver metadta fields
get_rcvr_fields()
#Get the receiver metadata
rcvr_data <- get_rcvr_data()
#Join the receiver metadata to the filtered detections
for(i in 1:length(final_list)){
out <- join_rcvr_data(final_list[[i]], rcvr_data)
final_list[[i]]
}
print(out)
check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
```{r setup}
# library(filteRjsats)
# library(filteRjsats)
# Choose a Directory
path <- dir("inst", full.names = TRUE)
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)
# Get a list of Time Zones
# Not Run
# OlsonNames()
# Set Time Zone
timezone <- "America/Los_Angeles"
# Empty list to store dataframes
det_list <- list()
# Process each file in the list of files
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
temp <- jsats_file
temp <- dplyr::arrange(.data = temp,Tag_Hex)
temp <- dplyr::group_by(.data = temp, Tag_Hex)
temp <- dplyr::arrange(.data = temp, Tag_Hex, DateTime_Local)
det_count <- dplyr::summarise(temp, det_count = dplyr::n())
temp <- dplyr::left_join(temp, det_count, by = "Tag_Hex")
temp <- temp[temp$det_count > 1,]
temp$time_diff_lag = difftime(temp$DateTime_Local, dplyr::lag(temp$DateTime_Local),
units = "secs")
temp$multipath = ifelse(temp$time_diff_lag > lubridate::seconds(0.3)|
temp$Tag_Hex != dplyr::lag(temp$Tag_Hex), FALSE, TRUE)
temp$multipath = ifelse(is.na(temp$time_diff_lag) &
dplyr::lead(temp$multipath) == FALSE,
FALSE,
ifelse(is.na(temp$time_diff_lag),
TRUE,
temp$multipath))
temp <- temp[temp$multipath == FALSE,] # filter out Multipath
temp$time_diff_lag = difftime(temp$DateTime_Local, dplyr::lag(temp$DateTime_Local),
units = "secs")
temp$time_diff_lag = ifelse(temp$Tag_Hex != dplyr::lag(temp$Tag_Hex),NA,temp$time_diff_lag)
temp$RefTag = ifelse(temp$Tag_Decimal %in% reference_tags, TRUE, FALSE) #Is it a ref tag?
temp$CheckMBP = ifelse(temp$RefTag == TRUE, # If a ref tag,
(temp$time_diff_lag < lubridate::seconds(3*64)), # 2 hits in 3*Max PRI
(temp$time_diff_lag < lubridate::seconds(12*10))) # 2 hits in 12*Max PRI
temp$CheckMBP = ifelse(is.na(temp$time_diff_lag) & dplyr::lead(temp$CheckMBP) == FALSE, #First Detection is FALSE if 2nd is FALSE
FALSE,
ifelse(is.na(temp$time_diff_lag),
TRUE,
temp$CheckMBP)) #Otherwise it's valid
temp$CheckMBP = ifelse(temp$CheckMBP == FALSE & !is.na(dplyr::lead(temp$time_diff_lag)) &
dplyr::lead(temp$time_diff_lag) < lubridate::seconds(12*10), #If invalid based on last detection, but following detection is <120s
TRUE, #Valid
temp$CheckMBP) #Return Previous Assignment
temp <- temp[temp$CheckMBP == TRUE,]
temp <- dplyr::select(.data =  temp,
-c(`det_count`))
det_count <- dplyr::summarise(temp, det_count = dplyr::n())
temp <- dplyr::left_join(temp, `det_count`, by = "Tag_Hex")
temp <- temp[temp$det_count > 1,]
temp <- dplyr::ungroup(temp)
temp <- dplyr::select(.data =  temp,
-c(time_diff_lag,multipath,RefTag,`det_count`))
temp <- dplyr::arrange(temp, `ReceiverSN`, Tag_Hex, DateTime_Local)
temp <- temp[!is.na(temp$DateTime_Local),]
prefilter_file <- temp
prefilter_file
temp <- dplyr::arrange(.data = temp, `ReceiverSN`, Tag_Hex, DateTime_Local)
temp <- temp[!is.na(temp$DateTime_Local),]
prefilter_file <- temp
prefilter_file
build()
build()
check()
library(filteRjsats)
# Choose a Directory
path <- dir("inst", full.names = TRUE)
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)
```{r assign timezone, echo=TRUE}
```{r assign timezone, echo=TRUE}
# Get a list of Time Zones
# Not Run
# OlsonNames()
# Set Time Zone
timezone <- "America/Los_Angeles"
# Empty list to store dataframes
det_list <- list()
# Process each file in the list of files
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
# Get a list of reference tags
reference_tags <- get_reference_tags()
# Empty list to store dataframes
pref_list <- list()
# Apply prefilter
for(i in 1:length(det_list)){
prefilter_file <- prefilter(det_list[[i]], reference_tags)
pref_list[[i]] <- prefilter_file
}
# View all the fish fields
get_fish_fields()
# NOT RUN
# Choose important fields if don't want all fields, shown are the minimum
# important_fields <- c("fish_type","tag_id_hex",
#                       "fish_release_date", "release_location",
#                       "release_latitude", "release_longitude",
#                       "tag_pulse_rate_interval_nominal",
#                       "tag_warranty_life", "fish_length_type",
#                       "fish_length","fish_weight")
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
# Empty list to store dataframes
fish_list <- list()
# Join fish data to detection and filter based on release date and battery
for(i in 1:length(pref_list)){
fish_file <- add_fish(pref_list[[i]], fish)
fish_list[[i]] <- fish_file
}
# Empty list to store dataframes
final_list <- list()
# Apply the final 2 hit or 4 hit filter
for(i in 1:length(fish_list)){
final_filter <- second_filter_2h4h(fish_list[[i]])
final_list[[i]] <- final_filter
}
# NOT RUN
# Alternately apply a 4 hit filter
# for(i in 1:length(fish_list)){
# final_filter <- second_filter_4h(fish_list[[i]])
# final_list[[i]] <- final_filter
# }
# View all the receiver metadta fields
get_rcvr_fields()
# NOT RUN
# # Choose important fields if don't want all fields, shown are the minimum
# rcvr_fields <- c("dep_id","receiver_serial_number","latitude","longitude",
#                  "receiver_location","receiver_river_km",
#                  "receiver_general_location","receiver_general_river_km",
#                  "receiver_beacon_id_hex", "receiver_start",
#                  "receiver_end")
#Get the receiver metadata
rcvr_data <- get_rcvr_data()
#Join the receiver metadata to the filtered detections
for(i in 1:length(final_list)){
out <- join_rcvr_data(final_list[[i]], rcvr_data)
final_list[[i]]
}
print(out)
