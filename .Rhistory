View(LOT)
View(LOT)
#Format changed from V1
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
character(),
character()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","Sensor","P"),
skip = 45)
#Format changed from V1
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
header = TRUE,
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","Sensor","P"),
skip = 44)
#Format changed from V1
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
header = TRUE,
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","Sensor","P"),
skip = 43)
View(LOT)
LOT <- LOT[2:nrow(LOT),]
View(LOT)
#Format changed from V1
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
header = TRUE,
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","Sensor","P"),
skip = 43)
sensor = FALSE
#Format changed from V1
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","Sensor","P"),
skip = 45)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","P"),
skip = 45)
}
View(LOT)
LOT$ReceiverSN <- as.numeric(gsub("WHS4K-","",ReceiverSN)) #Turn the file name into serial
View(LOT)
LOT$DateTime_Local =  as.POSIXlt(paste(LOT$Date),paste(LOT$Time_Local), #Convert character DateTime to real DT
tryFormats = ("%m/%d/%y %H:%M%OS"),
tz = timezone)
timezone = "America/Los_Angeles"
LOT$DateTime_Local =  as.POSIXlt(paste(LOT$Date),paste(LOT$Time_Local), #Convert character DateTime to real DT
tryFormats = ("%m/%d/%y %H:%M%OS"),
tz = timezone)
View(LOT)
paste(LOT$Date,LOT$Time_Local, sep = " ")
LOT$DateTime_Local =  as.POSIXlt(paste(LOT$Date,LOT$Time_Local, sep = " "), #Convert character DateTime to real DT
tryFormats = ("%m/%d/%y %H:%M%OS"),
tz = timezone)
LOT$FS = lubridate::seconds(LOT$FS) #Convert fractional seconds from number to seconds
LOT$DateTime_Local = LOT$DateTime_Local+LOT$FS #Add them together
LOT$Filename = stringr::str_split(file, pattern = '\\.')[[1]][1]
LOT$Make = rep("Lotek", length(LOT$DateTime_Local))
LOT$Make = "Lotek"
View(LOT)
LOT$Tag_Hex = broman::convert2hex(LOT$Tag_Decimal)
LOT <- dplyr::select(.data =  LOT, ReceiverSN, Make, DateTime_Local,
Tag_Decimal, Tag_Hex)
LOT
# file_name <- stringr::str_split(file, pattern = '\\.')[[1]][1]
file_type <- ifelse(stringr::str_detect(file,'L'),
"Lotek",
ifelse(stringr::str_detect(file,'.SUM'),
"Teknologic",
ifelse(stringr::str_detect(file,'.JST'),
"Lotek_v2",
"ATS")
)
)
#Serial number now has to be retrieved from inside file
ReceiverSN <- read.delim(file.path(path,file),
skip = 18,
nrows = 1,
sep = ":",
header = FALSE)
ReceiverSN <- ReceiverSN[1,2]
ReceiverSN <- trimws(ReceiverSN)
#Format changed from V1
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","Sensor","P"),
skip = 45)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","P"),
skip = 45)
}
View(LOT)
LOT$ReceiverSN <- as.numeric(gsub("WHS4K-","",ReceiverSN)) #Turn the file name into serial
LOT$DateTime_Local =  as.POSIXlt(paste(LOT$Date,LOT$Time_Local, sep = " "), #Convert character DateTime to real DT
tryFormats = ("%m/%d/%y %H:%M%OS"),
tz = timezone)
LOT$DateTime_Local =  as.POSIXlt(paste(LOT$Date,LOT$Time_Local, sep = " "), #Convert character DateTime to real DT
format = ("%m/%d/%y %H:%M%OS"),
tz = timezone)
#Format changed from V1
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","Sensor","P"),
skip = 45)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","P"),
skip = 45)
}
LOT$ReceiverSN <- as.numeric(gsub("WHS4K-","",ReceiverSN)) #Turn the file name into serial
LOT$DateTime_Local =  as.POSIXlt(paste(LOT$Date,LOT$Time_Local, sep = " "), #Convert character DateTime to real DT
format = ("%m/%d/%y %H:%M%OS"),
tz = timezone)
LOT$DateTime_Local =  as.POSIXct(paste(LOT$Date,LOT$Time_Local, sep = " "), #Convert character DateTime to real DT
format = ("%m/%d/%y %H:%M%OS"),
tz = timezone)
LOT$Tag_Hex = broman::convert2hex(LOT$Tag_Decimal)
LOT$FS = lubridate::seconds(LOT$FS) #Convert fractional seconds from number to seconds
LOT$DateTime_Local = LOT$DateTime_Local+LOT$FS #Add them together
LOT$DateTime_Local
LOT$DateTime_Local[1]
#Format changed from V1
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","Sensor","P"),
skip = 45)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","P"),
skip = 45)
}
LOT$ReceiverSN <- as.numeric(gsub("WHS4K-","",ReceiverSN)) #Turn the file name into serial
LOT$DateTime_Local =  as.POSIXct(paste(LOT$Date,LOT$Time_Local, sep = " "), #Convert character DateTime to real DT
format = ("%m/%d/%y %H:%M%OS"),
tz = timezone)
LOT$Tag_Hex = broman::convert2hex(LOT$Tag_Decimal)
LOT$FS = lubridate::seconds(LOT$FS) #Convert fractional seconds from number to seconds
LOT$DateTime_Local = LOT$DateTime_Local+LOT$FS #Add them together
LOT$Filename = stringr::str_split(file, pattern = '\\.')[[1]][1]
LOT$Make = "Lotek"
LOT$DateTime_Local[2]-LOT$DateTime_Local[1]
diff.time(LOT$DateTime_Local[2],LOT$DateTime_Local[1], units = "seconds")
difftime(LOT$DateTime_Local[2],LOT$DateTime_Local[1], units = "seconds")
difftime(LOT$DateTime_Local[2],LOT$DateTime_Local[1], units = "secs")
devtools::build(vignettes = FALSE)
devtools::build(vignettes = FALSE)
library(filteRjsats)
path = "C:/Users/tspaulding/Desktop"
file list.files(path)
file < - list.files(path)
file <- list.files(path)
file <- list.files(path, pattern = "WHS4K")
det_list()
det_list <- list()
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
file <- list.files(path, pattern = "WHS4K")
det_list <- list()
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
# find the end of the file
ReceiverSN <- read.delim(file.path(path,file),
skip = 45,
sep = ":",
header = FALSE)
View(ReceiverSN)
# find the end of the file
file_end <- read.delim(file.path(path,file),
skip = 45,
sep = ":",
header = FALSE)
file_end <- which(grepl(file_end$V1, "Receiver Setup Messages"))
# find the end of the file
file_end <- read.delim(file.path(path,file),
skip = 45,
sep = ":",
header = FALSE)
View(file_end)
file_end <- which(grepl("Receiver Setup Messages",file_end$V1))
file_end <- which(grepl(file_end$V1, "Receiver Setup Messages"))-1
# find the end of the file
file_end <- read.delim(file.path(path,file),
skip = 45,
sep = ":",
header = FALSE)
file_end <- which(grepl(file_end$V1, "Receiver Setup Messages"))-1
file_end <- which(grepl("Receiver Setup Messages",file_end$V1))-1
# find the end of the file
file_end <- read.delim(file.path(path,file),
skip = 45,
sep = ":",
header = FALSE)
file_end <- which(grepl("Receiver Setup Messages",file_end$V1))-1
#Format changed from V1
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","Sensor","P"),
skip = 45,
nrows = file_end)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","P"),
skip = 45,
nrows = file_end)
}
sensor = FALSE
#Format changed from V1
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","Sensor","P"),
skip = 45,
nrows = file_end)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","P"),
skip = 45,
nrows = file_end)
}
LOT$ReceiverSN <- as.numeric(gsub("WHS4K-","",ReceiverSN)) #Turn the file name into serial
#Serial number now has to be retrieved from inside file
ReceiverSN <- read.delim(file.path(path,file),
skip = 18,
nrows = 1,
sep = ":",
header = FALSE)
ReceiverSN <- ReceiverSN[1,2]
ReceiverSN <- trimws(ReceiverSN)
# find the end of the file
file_end <- read.delim(file.path(path,file),
skip = 45,
sep = ":",
header = FALSE)
file_end <- which(grepl("Receiver Sensor Messages",file_end$V1))-1
#Format changed from V1
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","Sensor","P"),
skip = 45,
nrows = file_end)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","P"),
skip = 45,
nrows = file_end)
}
LOT$ReceiverSN <- as.numeric(gsub("WHS4K-","",ReceiverSN)) #Turn the file name into serial
LOT$DateTime_Local =  as.POSIXct(paste(LOT$Date,LOT$Time_Local, sep = " "), #Convert character DateTime to real DT
format = ("%m/%d/%y %H:%M%OS"),
tz = timezone)
timezone = "America/Los_Angeles"
LOT$DateTime_Local =  as.POSIXct(paste(LOT$Date,LOT$Time_Local, sep = " "), #Convert character DateTime to real DT
format = ("%m/%d/%y %H:%M%OS"),
tz = timezone)
LOT$Tag_Hex = broman::convert2hex(LOT$Tag_Decimal)
LOT$FS = lubridate::seconds(LOT$FS) #Convert fractional seconds from number to seconds
View(LOT)
LOT$DateTime_Local = LOT$DateTime_Local+LOT$FS #Add them together
LOT$Filename = stringr::str_split(file, pattern = '\\.')[[1]][1]
LOT$Make = "Lotek"
LOT <- dplyr::select(.data =  LOT, ReceiverSN, Make, DateTime_Local,
Tag_Decimal, Tag_Hex)
LOT
path = "C:/Users/tspaulding/Desktop"
file <- list.files(path, pattern = "WHS4K")
det_list <- list()
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
detach(filteRjsats)
detach("filteRjsats")
detach("package:filteRjsats", unload = TRUE)
devtools::install_github("https://github.com/Tspaulding-ESA/filteRjsats")
library(filteRjsats)
path = "C:/Users/tspaulding/Desktop"
file <- list.files(path, pattern = "WHS4K")
det_list <- list()
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
View(jsats_file)
devtools::build(vignettes = FALSE)
save.rds(det_list, "C:/Users/tspaulding/Desktop/det_list.rds")
saveRDS(det_list, "C:/Users/tspaulding/Desktop/det_list.rds")
detach("package:filteRjsats", unload = TRUE)
library(filteRjsats)
# Choose a Directory
path <- system.file("extdata", package = "filteRjsats")
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)
# Get a list of Time Zones
# Not Run
# OlsonNames()
# Set Time Zone
timezone <- "America/Los_Angeles"
# Empty list to store dataframes
det_list <- list()
# Process each file in the list of files
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
View(jsats_file)
# Get a list of reference tags
reference_tags <- get_reference_tags()
# Empty list to store dataframes
pref_list <- list()
# Apply prefilter
for(i in 1:length(det_list)){
prefilter_file <- prefilter(det_list[[i]], reference_tags)
pref_list[[i]] <- prefilter_file
}
# View all the fish fields
get_fish_fields()
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
View(fish)
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
```{r join fish data to detection dataframe, echo=TRUE}
# Join fish data to detection and filter based on release date and battery
for(i in 1:length(pref_list)){
fish_file <- add_fish(pref_list[[i]], fish)
fish_list[[i]] <- fish_file
}
# Empty list to store dataframes
fish_list <- list()
# Join fish data to detection and filter based on release date and battery
for(i in 1:length(pref_list)){
fish_file <- add_fish(pref_list[[i]], fish)
fish_list[[i]] <- fish_file
}
# Empty list to store dataframes
final_list <- list()
# Apply the final 2 hit or 4 hit filter
for(i in 1:length(fish_list)){
final_filter <- second_filter_2h4h(fish_list[[i]])
final_list[[i]] <- final_filter
}
# View all the receiver metadata fields
get_rcvr_fields()
# NOT RUN
# # Choose important fields if don't want all fields, shown are the minimum
# rcvr_fields <- c("dep_id","receiver_serial_number","latitude","longitude",
#                  "receiver_location","receiver_river_km",
#                  "receiver_general_location","receiver_general_river_km",
#                  "receiver_beacon_id_hex", "receiver_start",
#                  "receiver_end")
#Get the receiver metadata
rcvr_data <- get_rcvr_data()
#Join the receiver metadata to the filtered detections
for(i in 1:length(final_list)){
out <- join_rcvr_data(final_list[[i]], rcvr_data)
final_list[[i]]
}
