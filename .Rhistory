det_list[[i]] <- jsats_file
}
View(jsats_file)
devtools::build(vignettes = FALSE)
save.rds(det_list, "C:/Users/tspaulding/Desktop/det_list.rds")
saveRDS(det_list, "C:/Users/tspaulding/Desktop/det_list.rds")
detach("package:filteRjsats", unload = TRUE)
library(filteRjsats)
# Choose a Directory
path <- system.file("extdata", package = "filteRjsats")
# List Files in Directory
file <- list.files(path = path, recursive = TRUE)
# Get a list of Time Zones
# Not Run
# OlsonNames()
# Set Time Zone
timezone <- "America/Los_Angeles"
# Empty list to store dataframes
det_list <- list()
# Process each file in the list of files
for(i in 1:length(file)){
jsats_file <- read_jsats(path, file[i])
det_list[[i]] <- jsats_file
}
View(jsats_file)
# Get a list of reference tags
reference_tags <- get_reference_tags()
# Empty list to store dataframes
pref_list <- list()
# Apply prefilter
for(i in 1:length(det_list)){
prefilter_file <- prefilter(det_list[[i]], reference_tags)
pref_list[[i]] <- prefilter_file
}
# View all the fish fields
get_fish_fields()
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
View(fish)
# Query ERDAPP for all tagged fish
fish <- get_tagged_fish()
```{r join fish data to detection dataframe, echo=TRUE}
# Join fish data to detection and filter based on release date and battery
for(i in 1:length(pref_list)){
fish_file <- add_fish(pref_list[[i]], fish)
fish_list[[i]] <- fish_file
}
# Empty list to store dataframes
fish_list <- list()
# Join fish data to detection and filter based on release date and battery
for(i in 1:length(pref_list)){
fish_file <- add_fish(pref_list[[i]], fish)
fish_list[[i]] <- fish_file
}
# Empty list to store dataframes
final_list <- list()
# Apply the final 2 hit or 4 hit filter
for(i in 1:length(fish_list)){
final_filter <- second_filter_2h4h(fish_list[[i]])
final_list[[i]] <- final_filter
}
# View all the receiver metadata fields
get_rcvr_fields()
# NOT RUN
# # Choose important fields if don't want all fields, shown are the minimum
# rcvr_fields <- c("dep_id","receiver_serial_number","latitude","longitude",
#                  "receiver_location","receiver_river_km",
#                  "receiver_general_location","receiver_general_river_km",
#                  "receiver_beacon_id_hex", "receiver_start",
#                  "receiver_end")
#Get the receiver metadata
rcvr_data <- get_rcvr_data()
#Join the receiver metadata to the filtered detections
for(i in 1:length(final_list)){
out <- join_rcvr_data(final_list[[i]], rcvr_data)
final_list[[i]]
}
devtools::build(,vignettes = FALSE)
grep -R "filteRjsats" .
devtools::document()
devtools::document()
devtools::build(,vignettes = FALSE)
devtools::document()
devtools::document()
devtools::document()
library(filteRjsats)
filteRjsats::read_lotek_v2(path = "C:/Users/tspaulding/Desktop", file = "WHS4K-2000385_20250626_111132.JST")
#Serial number now has to be retrieved from inside file
ReceiverSN <- read.delim(file.path(path,file),
skip = 18,
nrows = 1,
sep = ":",
header = FALSE)
path = "C:/Users/tspaulding/Desktop", file = "WHS4K-2000385_20250626_111132.JST"
path = "C:/Users/tspaulding/Desktop"; file = "WHS4K-2000385_20250626_111132.JST"
#Serial number now has to be retrieved from inside file
ReceiverSN <- read.delim(file.path(path,file),
skip = 18,
nrows = 1,
sep = ":",
header = FALSE)
ReceiverSN <- ReceiverSN[1,2]
ReceiverSN <- trimws(ReceiverSN)
# find the end of the file
file_end <- read.delim(file.path(path,file),
skip = 45,
sep = ":",
header = FALSE)
file_end <- which(grepl("Receiver Sensor Messages",file_end$V1))-1
hex_id <- grepl("hex", read.delim(file.path(path,file),
skip = 43,
sep = "",
nrows = 1))
hex_id <- grepl("hex", read.delim(file.path(path,file),
skip = 43,
nrows = 1))
read.delim(file.path(path,file),
skip = 43,
nrows = 1)
read.delim(file.path(path,file),
skip = 42,
nrows = 1)
hex_id <- grepl("hex", read.delim(file.path(path,file),
skip = 42,
nrows = 1))
#Format changed from V1
if(hex_id == FALSE){
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","Sensor","P"),
skip = 45,
nrows = file_end)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","P"),
skip = 45,
nrows = file_end)
}
} else {
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Hex",
"Tag Type","Sensor","P"),
skip = 45,
nrows = file_end)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Hex",
"Tag Type","P"),
skip = 45,
nrows = file_end)
}
}
sensor = NULL
#Format changed from V1
if(hex_id == FALSE){
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","Sensor","P"),
skip = 45,
nrows = file_end)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","P"),
skip = 45,
nrows = file_end)
}
} else {
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Hex",
"Tag Type","Sensor","P"),
skip = 45,
nrows = file_end)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Hex",
"Tag Type","P"),
skip = 45,
nrows = file_end)
}
}
sensor = FALSE
#Format changed from V1
if(hex_id == FALSE){
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","Sensor","P"),
skip = 45,
nrows = file_end)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","P"),
skip = 45,
nrows = file_end)
}
} else {
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Hex",
"Tag Type","Sensor","P"),
skip = 45,
nrows = file_end)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Hex",
"Tag Type","P"),
skip = 45,
nrows = file_end)
}
}
#'
#' @param path the path to the folder containing the desired file
#' @param file the path of the desired file
#' @param timezone the Olsen Named time zone, default is "America/Los_Angeles"
#' @param sensor Logical, does the tag have an environmental sensor? default is FALSE
#' @returns A dataframe converting the raw detection data into rows of detections
#' @export
#' @examples
#' # see read_ats or read_tekno for example usage
#'
read_lotek_v2 <- function(path, file, sensor = FALSE,
timezone="America/Los_Angeles"){
#Serial number now has to be retrieved from inside file
ReceiverSN <- read.delim(file.path(path,file),
skip = 18,
nrows = 1,
sep = ":",
header = FALSE)
ReceiverSN <- ReceiverSN[1,2]
ReceiverSN <- trimws(ReceiverSN)
# find the end of the file
file_end <- read.delim(file.path(path,file),
skip = 45,
sep = ":",
header = FALSE)
file_end <- which(grepl("Receiver Sensor Messages",file_end$V1))-1
hex_id <- grepl("hex", read.delim(file.path(path,file),
skip = 42,
nrows = 1))
#Format changed from V1
if(hex_id == FALSE){
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","Sensor","P"),
skip = 45,
nrows = file_end)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","P"),
skip = 45,
nrows = file_end)
}
} else {
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Hex",
"Tag Type","Sensor","P"),
skip = 45,
nrows = file_end)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Hex",
"Tag Type","P"),
skip = 45,
nrows = file_end)
}
}
LOT$ReceiverSN <- as.numeric(gsub("WHS4K-","",ReceiverSN)) #Turn the file name into serial
LOT$DateTime_Local =  as.POSIXct(paste(LOT$Date,LOT$Time_Local, sep = " "), #Convert character DateTime to real DT
format = ("%m/%d/%y %H:%M%OS"),
tz = timezone)
LOT$Tag_Hex = ifelse(!is.finite(Tag_Hex),
broman::convert2hex(LOT$Tag_Decimal),
Tag_Hex)
LOT$Tag_Hex <- stringr::str_to_upper(LOT$Tag_Hex)
LOT$FS = lubridate::seconds(LOT$FS) #Convert fractional seconds from number to seconds
LOT$DateTime_Local = LOT$DateTime_Local+LOT$FS #Add them together
LOT$Filename = stringr::str_split(file, pattern = '\\.')[[1]][1]
LOT$Make = "Lotek"
LOT <- dplyr::select(.data =  LOT, ReceiverSN, Make, DateTime_Local,
Tag_Decimal, Tag_Hex)
LOT
}
#Format changed from V1
if(hex_id == FALSE){
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","Sensor","P"),
skip = 45,
nrows = file_end)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Decimal",
"Tag Type","P"),
skip = 45,
nrows = file_end)
}
} else {
if(sensor == TRUE){
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Hex",
"Tag Type","Sensor","P"),
skip = 45,
nrows = file_end)
} else {
LOT = read.delim(file.path(path,file),
sep = "",
colClasses = c(character(),
character(),
numeric(),
character(),
character(),
numeric()),
col.names = c("Date","Time_Local","FS","Tag_Hex",
"Tag Type","P"),
skip = 45,
nrows = file_end)
}
}
View(LOT)
LOT$Tag_Hex = NA
LOT$Tag_Hex = ifelse(!is.finite(Tag_Hex),
broman::convert2hex(LOT$Tag_Decimal),
Tag_Hex)
LOT$Tag_Hex = NA
LOT$Tag_Hex = ifelse(!is.finite(LOT$Tag_Hex),
broman::convert2hex(LOT$Tag_Decimal),
LOT$Tag_Hex)
LOT$Tag_Hex <- stringr::str_to_upper(LOT$Tag_Hex)
devtools::document()
devtools::build()
devtools::build(vignettes = FALSE)
get_fish
filteRjsats::get_tagged_fish()
# Attempt to retrieve the data
fish <- tryCatch({
rerddap::tabledap('FED_JSATS_taggedfish',
url = "https://oceanview.pfeg.noaa.gov/erddap/",
fields = fields)
}, error = function(e) {
message("⚠️ Failed to download data from ERDDAP. Error message: ", e$message)
return(data.frame())
})
# Get the list of fields if provided
fields <- NULL
if (!is.null(important_fields)) {
fields <- info$variables$variable_name[important_fields]
}
filteRjsats::important_fields
filteRjsats:::important_fields
info$variables$variable_name[important_fields]
fields <- info$variables$variable_name[important_fields]
dev_tools::document()
devtools::document()
devtools::build(vignettes = FALSE)
devtools::document()
devtools::build(vignettes = FALSE)
devtools::document()
devtools::build(vignettes = FALSE)
